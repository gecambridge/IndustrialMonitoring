<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:ni="urn:ni">
  <assembly>
    <name>NationalInstruments.Controls</name>
  </assembly>
  <members>
    <member name="T:NationalInstruments.Controls.Converters.RelativeOrientationConverter">
      <summary>
            Converts a RelativeOrientation to and from a String or Double value.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Converters.EnumObjectConverter`1">
      <summary>
            Base class for converting EnumObject instances to and from string values.
            </summary>
      <typeparam name="T">The EnumObject type being converted.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.EnumObjectConverter`1.#ctor" />
    <member name="M:NationalInstruments.Controls.Converters.EnumObjectConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.EnumObjectConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.EnumObjectConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    <member name="M:NationalInstruments.Controls.Converters.EnumObjectConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.EnumObjectConverter`1.ConvertStringToObject(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>
            Converts the specified string value to an instance of the T (generic type parameter) smart enum.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.EnumObjectConverter`1.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
      <summary>
            Converts the specified T (generic type parameter) smart enum value to a string.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.RelativeOrientationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.RelativeOrientationConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.RelativeOrientationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    <member name="M:NationalInstruments.Controls.Converters.RelativeOrientationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
    <member name="T:NationalInstruments.Controls.Converters.NotifyCollectionChangedSimplifier">
      <summary>
            Returns an INotifyCollectionChanged instance that issues one CollectionChanged
            event for each item changed.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.NotifyCollectionChangedSimplifier.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="M:NationalInstruments.Controls.Converters.NotifyCollectionChangedSimplifier.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="T:NationalInstruments.Controls.Converters.SizeToDimensionConverter">
      <summary>
            Converts a Size to a Double that represents
            one of the size's dimensions.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Converters.SizeToDimensionConverter.Width">
      <summary>Gets a SizeToDimensionConverter
            instance that converts a Size to its width.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Converters.SizeToDimensionConverter.Height">
      <summary>Gets a SizeToDimensionConverter
            instance that converts a Size to its height.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.SizeToDimensionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="M:NationalInstruments.Controls.Converters.SizeToDimensionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="T:NationalInstruments.Controls.Converters.UIElementToNullConverter">
      <summary>
            Converts an object to null if it is a UIElement.
            Used to avoid duplicating UIElements in the visual tree.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.UIElementToNullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="M:NationalInstruments.Controls.Converters.UIElementToNullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="T:NationalInstruments.Controls.Converters.ValueFormatterMultiConverter">
      <summary>
            Converts a value to a string given the specified IValueFormatter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="T:NationalInstruments.Controls.Converters.DoubleToThicknessConverter">
      <summary>
            Used to scale a base thickness value by a numeric value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="M:NationalInstruments.Controls.Converters.DoubleToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
    <member name="P:NationalInstruments.Controls.Converters.DoubleToThicknessConverter.BaseThickness">
      <summary>
            Gets or sets the base thickness to scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterGroupConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterGroupConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterGroupConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValueFormatterGroupConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    <member name="M:NationalInstruments.Controls.Converters.ValuePresenterConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValuePresenterConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValuePresenterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.ValuePresenterConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    <member name="T:NationalInstruments.Controls.Data.BufferCollection">
      <summary>
            Represents a read-only collection of buffers of various data types.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.BufferCollection.#ctor(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.IBuffer})">
      <summary>
            Initializes a new instance of the BufferCollection class.
            </summary>
      <param name="data">The data buffers to form the collection with.</param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">data (parameter) contains a null buffer.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.BufferCollection.Dispose" />
    <member name="M:NationalInstruments.Controls.Data.BufferCollection.ToString" />
    <member name="M:NationalInstruments.Controls.Data.BufferCollection.GetEnumerator" />
    <member name="P:NationalInstruments.Controls.Data.BufferCollection.Count">
      <summary>
            Gets the number of buffers in the collection.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Data.BufferCollection.Item(System.Int32)">
      <summary>
            Gets the buffer at the specified index.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Data.RelativeIntervalTrait">
      <summary>
            A Trait that indicates the 
            equivalent relative interval used to generate values in the associated buffer.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RelativeIntervalTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope,System.Double)">
      <summary>
            Initializes a new instance of the RelativeIntervalTrait class with the specified scope and interval.
            </summary>
      <param name="scope">The scope the trait applies to.</param>
      <param name="relativeInterval">The default relative interval for the associated buffer.</param>
      <exception cref="T:System.ArgumentException">scope (parameter) is empty.
              - or -

scope (parameter) is not a range or buffer scope.

- or -scope (parameter) is not a range or buffer scope.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">relativeInterval (parameter) is NaN, PositiveInfinity, or NegativeInfinity.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RelativeIntervalTrait.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)" />
    <member name="M:NationalInstruments.Controls.Data.RelativeIntervalTrait.GetLocalHashCode" />
    <member name="M:NationalInstruments.Controls.Data.RelativeIntervalTrait.LocalEquals(NationalInstruments.DataInfrastructure.Trait)" />
    <member name="M:NationalInstruments.Controls.Data.RelativeIntervalTrait.ToString" />
    <member name="P:NationalInstruments.Controls.Data.RelativeIntervalTrait.RelativeInterval">
      <summary>
            Gets the relative value of the interval used to generate the values in the associated buffer.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.GeneralValueFormatter">
      <summary>
            Uses a string format argument to display a value.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.ValueFormatter">
      <summary>
            Provides a means for text formatting of a data value.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.ValuePresenter">
      <summary>
            Base class for all value presenters, which provide a means for visually displaying a data value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValuePresenter.Visualize``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs,System.Windows.UIElement)">
      <summary>
            Transforms the specified raw data value into a visual element.
            </summary>
      <typeparam name="TData">The type of the data.</typeparam>
      <param name="value">The value to display.</param>
      <param name="args">Additional arguments.</param>
      <param name="existingVisual">The existing visual to re-use. If null, a new visual will be created.</param>
      <returns>A visual that represents the value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValuePresenter.Visualize(System.Object,NationalInstruments.Controls.Primitives.ValuePresenterArgs,System.Windows.UIElement)">
      <summary>
            Transforms the specified raw data value into a visual element.
            </summary>
      <param name="value">The value to display.</param>
      <param name="args">Additional arguments.</param>
      <param name="existingVisual">The existing visual to re-use. If null, a new visual will be created.</param>
      <returns>A visual that represents the value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValuePresenter.VisualizeCore``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs,System.Windows.UIElement)">
      <summary>
            Overridden in derived classes to transforms the specified raw data value into a visual element.
            </summary>
      <typeparam name="TData">The type of the data.</typeparam>
      <param name="value">The value to display.</param>
      <param name="args">Additional arguments.</param>
      <param name="existingVisual">The existing visual to re-use. If null, a new visual will be created.</param>
      <returns>A visual that represents the value.</returns>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.IValueFormatter">
      <summary>
            Represents a value formatter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.IValueFormatter.Format``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs)">
      <summary>
            Formats a data value into a string.
            </summary>
      <param name="value">
            The value to be formatted.
            </param>
      <param name="args">
            The arguments.
            </param>
      <typeparam name="TData">
            The type of the data value.
            </typeparam>
      <returns>
            A string representing the data value.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ValueFormatter.BackgroundProperty">
      <summary>
            Identifies the Background dependency property.
            </summary>
      <returns>
            The identifier for the Background dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ValueFormatter.ForegroundProperty">
      <summary>
            Identifies the Foreground dependency property.
            </summary>
      <returns>
            The identifier for the Foreground dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ValueFormatter.FontFamilyProperty">
      <summary>
            Identifies the FontFamily dependency property.
            </summary>
      <returns>
            The identifier for the FontFamily dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ValueFormatter.FontSizeProperty">
      <summary>
            Identifies the FontSize dependency property.
            </summary>
      <returns>
            The identifier for the FontSize dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ValueFormatter.FontStretchProperty">
      <summary>
            Identifies the FontStretch dependency property.
            </summary>
      <returns>
            The identifier for the FontStretch dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ValueFormatter.FontStyleProperty">
      <summary>
            Identifies the FontStyle dependency property.
            </summary>
      <returns>
            The identifier for the FontStyle dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ValueFormatter.FontWeightProperty">
      <summary>
            Identifies the FontWeight dependency property.
            </summary>
      <returns>
            The identifier for the FontWeight dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValueFormatter.VisualizeCore``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs,System.Windows.UIElement)" />
    <member name="M:NationalInstruments.Controls.Primitives.ValueFormatter.Format``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs)">
      <summary>
            Formats the specified raw data value into a string representation.
            </summary>
      <typeparam name="TData">The type of the data.</typeparam>
      <param name="value">The value to be formatted.</param>
      <param name="args">Additional arguments.</param>
      <returns>The formatted value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValueFormatter.FormatCore``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs)">
      <summary>
            Implements the logic to format the specified raw data value into a string representation.
            </summary>
      <typeparam name="TData">The type of the data.</typeparam>
      <param name="value">The value to be formatted.</param>
      <param name="args">Additional arguments.</param>
      <returns>The formatted value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValueFormatter.Parse``1(System.String,NationalInstruments.Controls.Primitives.ValuePresenterArgs)">
      <summary>
            Parses the specified string value representation.
            </summary>
      <typeparam name="TData">The type of the data.</typeparam>
      <param name="value">The value to parse.</param>
      <param name="args">Additional arguments.</param>
      <returns>The parsed value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValueFormatter.TryParse``1(System.String,NationalInstruments.Controls.Primitives.ValuePresenterArgs,``0@)">
      <summary>
            Attempts to parse the specified string value representation.
            </summary>
      <typeparam name="TData">The type of the data.</typeparam>
      <param name="value">The value to parse.</param>
      <param name="args">Additional arguments.</param>
      <param name="parsedValue">The parsed value.</param>
      <returns>true if the value was successfully parsed; otherwise false.</returns>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValueFormatter.Background">
      <summary>Gets or sets a Brush that is used to draw the background of the presented content.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValueFormatter.Foreground">
      <summary>Gets or sets a brush that describes the foreground color.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValueFormatter.FontFamily">
      <summary>Gets or sets the font used to display text.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValueFormatter.FontSize">
      <summary>Gets or sets the size of the text.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValueFormatter.FontStretch">
      <summary>Gets or sets the degree to which a font is condensed or expanded on the screen.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValueFormatter.FontStyle">
      <summary>Gets or sets the style in which the text is rendered.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValueFormatter.FontWeight">
      <summary>Gets or sets the thickness of the specified font.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.GeneralValueFormatter.FormatProperty">
      <summary>
            Identifies the Format dependency property.
            </summary>
      <returns>
            The identifier for the Format dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.GeneralValueFormatter.ShortFormatProperty">
      <summary>
            Identifies the ShortFormat dependency property.
            </summary>
      <returns>
            The identifier for the ShortFormat dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.GeneralValueFormatter.CreateInstanceCore" />
    <member name="M:NationalInstruments.Controls.GeneralValueFormatter.#ctor">
      <summary>
            Initializes a new instance of the GeneralValueFormatter class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.GeneralValueFormatter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the GeneralValueFormatter class with the specified format.
            </summary>
      <param name="format">The specified format to use.</param>
    </member>
    <member name="M:NationalInstruments.Controls.GeneralValueFormatter.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the GeneralValueFormatter class with the specified format and short format.
            </summary>
      <param name="format">The specified format to use.</param>
      <param name="shortFormat">The specified short format to use.</param>
    </member>
    <member name="M:NationalInstruments.Controls.GeneralValueFormatter.FormatCore``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs)" />
    <member name="M:NationalInstruments.Controls.GeneralValueFormatter.Parse``1(System.String,NationalInstruments.Controls.Primitives.ValuePresenterArgs)" />
    <member name="M:NationalInstruments.Controls.GeneralValueFormatter.TryParse``1(System.String,NationalInstruments.Controls.Primitives.ValuePresenterArgs,``0@)" />
    <member name="M:NationalInstruments.Controls.GeneralValueFormatter.ToString" />
    <member name="P:NationalInstruments.Controls.GeneralValueFormatter.Format">
      <summary>Gets or sets the string format of the value.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.GeneralValueFormatter.ShortFormat">
      <summary>Gets or sets the short string format of the value.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.RelativeRect">
      <summary>
            A class that behaves the same as Rect but reverses top and bottom
            such that Top is larger than Bottom.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RemovingItemsList.SetRange(System.Int32,System.Int32)">
      <summary>
            Sets the range of visible items in the source list.
            </summary>
      <param name="index">The starting index in the source list to reference.</param>
      <param name="count">The number of items in the source list to reference.</param>
      <returns>An object that can be disposed to return the collection to an inaccessible state.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RemovingItemsList.ToString" />
    <member name="M:NationalInstruments.Controls.Internal.RemovingItemsList.CopyTo(System.Array,System.Int32)" />
    <member name="M:NationalInstruments.Controls.Internal.RemovingItemsList.CopyTo(System.Object[],System.Int32)" />
    <member name="M:NationalInstruments.Controls.Internal.RemovingItemsList.Contains(System.Object)" />
    <member name="M:NationalInstruments.Controls.Internal.RemovingItemsList.IndexOf(System.Object)" />
    <member name="M:NationalInstruments.Controls.Internal.RemovingItemsList.GetEnumerator" />
    <member name="M:NationalInstruments.Controls.Internal.RemovingItemsList.System#Collections#IEnumerable#GetEnumerator" />
    <member name="P:NationalInstruments.Controls.Internal.RemovingItemsList.Count" />
    <member name="P:NationalInstruments.Controls.Internal.RemovingItemsList.IsReadOnly" />
    <member name="P:NationalInstruments.Controls.Internal.RemovingItemsList.System#Collections#IList#IsFixedSize" />
    <member name="P:NationalInstruments.Controls.Internal.RemovingItemsList.System#Collections#ICollection#IsSynchronized" />
    <member name="P:NationalInstruments.Controls.Internal.RemovingItemsList.System#Collections#ICollection#SyncRoot" />
    <member name="P:NationalInstruments.Controls.Internal.RemovingItemsList.Item(System.Int32)" />
    <member name="M:NationalInstruments.Controls.Internal.Pair.Create``2(``0,``1)">
      <summary>Creates a new pair with the specified values.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Pair.CreateDictionary``2(``0,``1)">
      <summary>Creates a new dictionary key value pair with the specified values.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.TextBoxAdorner">
      <summary>
            This class puts a textbox into an adorner layer, centering it on the adorned element.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Pair`2.#ctor(`0,`1)">
      <summary>
            Initializes a new instance of the Pair&lt;T1,T2&gt; struct with the specified item1 and item2.
            </summary>
      <param name="item1">
            The first item in the pair.
            </param>
      <param name="item2">
            The second item in the pair.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Pair`2.Equals(NationalInstruments.Controls.Internal.Pair{`0,`1})">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>true if the current object is equal to the other (parameter) parameter; otherwise, false.
            </returns>
      <param name="other">
            An object to compare with this object.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Pair`2.op_Equality(NationalInstruments.Controls.Internal.Pair{`0,`1},NationalInstruments.Controls.Internal.Pair{`0,`1})">
      <summary>
            Determines whether two specified Pair&lt;T1,T2&gt; objects have the same value.
            </summary>
      <returns>true if the value of left (parameter) is the same as the value of right (parameter); otherwise, false.
            </returns>
      <param name="left">
            A Pair&lt;T1,T2&gt; object.
            </param>
      <param name="right">
            A Pair&lt;T1,T2&gt; object.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Pair`2.op_Inequality(NationalInstruments.Controls.Internal.Pair{`0,`1},NationalInstruments.Controls.Internal.Pair{`0,`1})">
      <summary>
            Determines whether two specified Pair&lt;T1,T2&gt; objects have different values.
            </summary>
      <returns>true if the value of left (parameter) is the same as the value of right (parameter); otherwise, false.
            </returns>
      <param name="left">
            A Pair&lt;T1,T2&gt; object.
            </param>
      <param name="right">
            A Pair&lt;T1,T2&gt; object.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Pair`2.Equals(System.Object)">
      <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
      <returns>true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
      <param name="obj">
            The Object to compare with the current Object.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Pair`2.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current Object.
            </returns>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Pair`2.Item1">
      <summary>
            Gets the first item in the pair.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Pair`2.Item2">
      <summary>
            Gets the second item in the pair.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1">
      <summary>
            Creates the labels for major divisions on a scale.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1">
      <summary>Base class for presenters that creates the ticks and labels divisions on a scale.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter">
      <summary>Base class for presenters that creates the ticks and labels divisions on a scale.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionChild">
      <summary>
            Provides an abstract base class for IRegionChild implementations.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.IRegionChild">
      <summary>
            Represents an object within a region.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.IRegionChild.RegisterParent(NationalInstruments.Controls.Primitives.Regions.RegionPanel)">
      <summary>
            Called when a child is being added to a region.
            </summary>
      <param name="parent">The new parent of the child.</param>
      <exception cref="T:System.ArgumentNullException">parent (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The child cannot be registered to the given parent.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.IRegionChild.UnregisterParent(NationalInstruments.Controls.Primitives.Regions.RegionPanel)">
      <summary>
            Called when a child is being removed from a region.
            </summary>
      <param name="parent">The old parent of the child.</param>
      <exception cref="T:System.ArgumentNullException">parent (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.IRegionChild.InitializeElements(NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo)">
      <summary>
            Initializes the UIElement objects used to visualize the child.
            </summary>
      <param name="info">The layout information to initialize.</param>
      <exception cref="T:System.ArgumentNullException">info (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionChild.ParentDefinition">
      <summary>
            Gets the name of the region definition the child should appear in.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChild.RegisterParent(NationalInstruments.Controls.Primitives.Regions.RegionPanel)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChild.UnregisterParent(NationalInstruments.Controls.Primitives.Regions.RegionPanel)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChild.InitializeElements(NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo)" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChild.ParentDefinition" />
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter.Edge">
      <summary>Gets the edge definition where the presenter should appear.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter.Presenter">
      <summary>Gets the scale presenter where the divisions are being displayed.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter.ParentDefinition" />
    <member name="M:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.UpdateSettings(NationalInstruments.Controls.Data.IRangeDataMapper{`0},NationalInstruments.Controls.RangeDivisionsMode,NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions)">
      <summary>Updates the display settings on the scale divisions presenter.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.InitializeElements(NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo)" />
    <member name="M:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.TryUpdateVisual(NationalInstruments.Controls.Primitives.ScalePresenter,System.Collections.Generic.IList{NationalInstruments.Controls.Primitives.Regions.RegionElement},System.Collections.Generic.IList{`0},System.Int32)">
      <summary>
            Returns true if the same visual was re-used to present the specified division;
            otherwise, returns false if the visual changed (requiring layout pass).
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.Divisions">
      <summary>Gets the divisions calculated by this presenter.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.VisibleDivisions">
      <summary>Gets the set of visible divisions.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.IsEditing">
      <summary>Gets or sets a value indicating whether the presenter is in an interactive edit.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.LastLayoutInfo">
      <summary>Gets or sets the last layout info collection.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.ParentPresenter">
      <summary>Gets the parent scale presenter.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.DataMapper">
      <summary>
            Gets or sets the data mapper for the scale being presented.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.Mode">
      <summary>
            Gets or sets the mode used to generate divisions.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.LayoutOptions">
      <summary>
            Gets or sets the layout options to apply to each division element.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScaleDivisionsPresenter`1.DataMapperChangedListener">
      <summary>
            Gets or sets a weak event listener for the IDataMapper.Changed event.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.IsMinimumEditableProperty">
      <summary>
            Identifies the IsMinimumEditable dependency property.
            </summary>
      <returns>
            The identifier for the IsMinimumEditable dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.IsMaximumEditableProperty">
      <summary>
            Identifies the IsMaximumEditable dependency property.
            </summary>
      <returns>
            The identifier for the IsMaximumEditable dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.ExtremeLabelInfoProperty">
      <summary>
            Identifies the ExtremeLabelInfo attached property.
            </summary>
      <returns>
            The identifier for the ExtremeLabelInfo attached property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.GetExtremeLabelInfo(System.Windows.UIElement)">
      <summary>
            Gets the value of the ExtremeLabelInfo attached property for a specified UIElement.
            </summary>
      <returns>
            The ExtremeLabelInfo property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.SetExtremeLabelInfo(System.Windows.UIElement,System.Tuple{NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter{`0},NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter{`0}.EditorPosition})">
      <summary>
            Sets the value of the ExtremeLabelInfo attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Tuple&lt;T1,T2&gt; value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.UpdateSettings(NationalInstruments.Controls.RangeLabeledDivisions,NationalInstruments.Controls.Internal.EditRange,NationalInstruments.Controls.Data.IRangeDataMapper{`0},NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions)">
      <summary>Updates the display settings on the scale divisions presenter.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.InitializeElements(NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo)" />
    <member name="M:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.GetDivisions(NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo)" />
    <member name="M:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.GetVisibleDivisions(System.Collections.Generic.IEnumerable{`0})" />
    <member name="M:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.UpdateVisual(System.Int32,`0,NationalInstruments.Controls.Primitives.ScalePresenter,System.Windows.UIElement@)" />
    <member name="P:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.ScaleDivisions">
      <summary>
            Gets or sets the scale divisions being presented.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.IsMinimumEditable">
      <summary>
            Gets or sets a value that controls whether the minimum label can edit the range of the scale.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.IsMaximumEditable">
      <summary>
            Gets or sets a value that controls whether the maximum label can edit the range of the scale.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.DefaultPresenter">
      <summary>
            Gets or sets the default presenter.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.Editor">
      <summary>
            Gets or sets the control used for interactive range editing.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.RangeLabeledDivisionsPresenter`1.EditRangeValueFormatter">
      <summary>
            Gets or sets the default formatter to use for range editing.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1">
      <summary>
            Creates the ticks representing the minor divisions for a scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.UpdateSettings(NationalInstruments.Controls.RangeDivisions,NationalInstruments.Controls.Primitives.NotifyingCollection{`0},NationalInstruments.Controls.Data.IRangeDataMapper{`0},NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions)">
      <summary>Updates the display settings on the scale divisions presenter.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.UpdateSettings(NationalInstruments.Controls.RangeLabeledDivisions,NationalInstruments.Controls.Primitives.NotifyingCollection{`0},NationalInstruments.Controls.Data.IRangeDataMapper{`0},NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions)">
      <summary>Updates the display settings on the scale divisions presenter.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.GetDivisions(NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo)" />
    <member name="M:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.UpdateVisual(System.Int32,`0,NationalInstruments.Controls.Primitives.ScalePresenter,System.Windows.UIElement@)" />
    <member name="F:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.TickShapeProperty">
      <summary>
            Identifies the TickShape attached property.
            </summary>
      <returns>
            The identifier for the TickShape attached property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.GetTickShape(System.Windows.UIElement)">
      <summary>
            Gets the value of the TickShape attached property for a specified UIElement.
            </summary>
      <returns>
            The TickShape property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.SetTickShape(System.Windows.UIElement,NationalInstruments.Controls.TickShape)">
      <summary>
            Sets the value of the TickShape attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed TickShape value.
            </param>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.ScaleDivisions">
      <summary>
            Gets or sets the scale divisions being presented.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.RangeDivisionsPresenter`1.DependentDivisions">
      <summary>
            Gets or sets the collection of actual divisions that were created by the generator.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.NotifyingCollection`1">
      <summary>
            A collection of items that notifies before and after changes are made.
            </summary>
      <typeparam name="T">
            The type of elements in the list.
            </typeparam>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.INotifyCollectionChanging">
      <summary>
            Notifies listeners of collection changes in a batching manner.
            </summary>
    </member>
    <member name="E:NationalInstruments.Controls.Primitives.INotifyCollectionChanging.CollectionChanging">
      <summary>
            Occurs when the collection is changing.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.NotifyingCollection`1.CountPropertyName">
      <summary>--- INTERNAL FOR TESTING ---</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.NotifyingCollection`1.IndexerPropertyName">
      <summary>--- INTERNAL FOR TESTING ---</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.CreateInstanceCore" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.#ctor">
      <summary>
            Initializes a new instance of the NotifyingCollection&lt;T&gt; class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the NotifyingCollection&lt;T&gt; class that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The collection whose elements are copied to the new NotifyingCollection&lt;T&gt;.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.ToString" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.Add(`0)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds the elements of the specified collection to the end of this collection.
            </summary>
      <param name="newItems">
            The new items.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.Clear" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.Contains(`0)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.CopyTo(`0[],System.Int32)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.GetEnumerator" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.IndexOf(`0)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.Insert(System.Int32,`0)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Inserts the elements of a collection into this collection at the specified index.
            </summary>
      <param name="index">
            The index at which to start the insertion.
            </param>
      <param name="newItems">
            The collection of new elements to insert.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Replaces all the elements of this collection with the elements of the specified collection.
            </summary>
      <param name="newItems">The the items to place in the collection.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
      <summary>
            Replaces all the elements of this collection with the elements of the specified collection.
            </summary>
      <param name="newItems">The the items to place in the collection.</param>
      <param name="notifyOnUnchanged">A value indicating whether unchanged items should be ignored.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.ReplaceRange(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Replaces the elements of a collection into the NotifyingCollection&lt;T&gt; at the specified index,
            raising only a single CollectionChanging event.
            </summary>
      <param name="index">The zero-based index at which the new elements should be replaced.</param>
      <param name="count">
            The number of elements to replace.
            If less than the number of newItems (parameter), additional elements are removed.
            If greater than the number of newItems (parameter), additional elements are inserted at the end.
            </param>
      <param name="newItems">
            The collection whose elements should be inserted into the NotifyingCollection&lt;T&gt;.
            The collection itself cannot be null, but it can contain elements that are null, if type T (generic type parameter) is a reference type.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.Remove(`0)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.RemoveAt(System.Int32)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from this collection.
            </summary>
      <param name="index">
            The index at which to start removing elements.
            </param>
      <param name="count">
            The number of elements to remove.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.ChangeItems(System.Int32,System.Int32,`0[])">
      <summary>
            Modifies the items in the collection, if any values have changed.
            </summary>
      <param name="index">The index where modifications should occur.</param>
      <param name="removeCount">The number of items to remove from the collection.</param>
      <param name="newItems">The items to add to the collection.</param>
      <returns>true if the collection was modified; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">
              The collection is in the middle of being modified.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.ChangeItemsCore(System.Int32,System.Int32,`0[])">
      <summary>
            Called when items change.
            </summary>
      <param name="index">
            The index at which to start changing items.
            </param>
      <param name="removeCount">
            The amount of elements to remove.
            </param>
      <param name="newItems">
            The items to be added to the collection.
            </param>
      <returns>
            Always returns true.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.FreezeCore(System.Boolean)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.CloneCore(System.Windows.Freezable)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.CloneCurrentValueCore(System.Windows.Freezable)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.GetAsFrozenCore(System.Windows.Freezable)" />
    <member name="M:NationalInstruments.Controls.Primitives.NotifyingCollection`1.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
    <member name="P:NationalInstruments.Controls.Primitives.NotifyingCollection`1.RemovingItems">
      <summary>
            Gets or sets a list referencing the removed items.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.NotifyingCollection`1.Count" />
    <member name="P:NationalInstruments.Controls.Primitives.NotifyingCollection`1.Item(System.Int32)" />
    <member name="E:NationalInstruments.Controls.Primitives.NotifyingCollection`1.CollectionChanging" />
    <member name="T:NationalInstruments.Controls.Primitives.IProxy`1">
      <summary>
            Represents an object that can act in place of another object.
            </summary>
      <typeparam name="T">The type of object being proxied.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.IProxy`1.Update(`0)">
      <summary>
            Updates the value of the proxy object.
            </summary>
      <param name="value">The new object to proxy.</param>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.NotSupportedException">
              The proxy does not support updates to Value.
            </exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IProxy`1.CanUpdate">
      <summary>
            Gets a value indicating whether the proxy can be updated with a new value.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IProxy`1.Value">
      <summary>
            Gets the proxied object.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Data.IDataMapper`1">
      <summary>
            Represents a strongly-typed data mapper that converts raw data to relative values.
            </summary>
      <typeparam name="TData">The data type of the data mapper.</typeparam>
    </member>
    <member name="T:NationalInstruments.Controls.Data.IDataMapper">
      <summary>
            Represents a data mapper that converts raw data to relative values.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IDataMapper.Transform(System.Double,System.Double)">
      <summary>
            Shifts and resizes the data mapper by the specified factors.
            </summary>
      <param name="panFactor">The relative amount to pan the data mapper.</param>
      <param name="zoomFactor">The relative amount to zoom the data mapper.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">panFactor (parameter) is NaN, NegativeInfinity, or PositiveInfinity.
            - or -

zoomFactor (parameter) is NaN, NegativeInfinity, or PositiveInfinity.
            

- or -

zoomFactor (parameter) is less than or equal to zero.
            

- or -zoomFactor (parameter) is NaN, NegativeInfinity, or PositiveInfinity.
            - or -zoomFactor (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.Controls.Data.IDataMapper.DataType">
      <summary>Gets the type of data supported by the data mapper.</summary>
    </member>
    <member name="E:NationalInstruments.Controls.Data.IDataMapper.DataMapperChanged">
      <summary>
            Occurs when a change to the data mapper requires existing relative values to be re-mapped.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IDataMapper`1.Contains(`0)">
      <summary>
            Returns a value indicating whether the specified raw data value is inside the bounds of the data mapper.
            </summary>
      <param name="value">A raw data value.</param>
      <returns>true if the value is inside the bounds of the data mapper; otherwise, false.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IDataMapper`1.AdjustRange(NationalInstruments.Controls.Data.BufferCollection{`0})">
      <summary>
            Adjusts the logical range of the data mapper to accommodate the specified data.
            </summary>
      <param name="data">The data used to adjust the logical range of the data mapper.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IDataMapper`1.Map(NationalInstruments.DataInfrastructure.Buffer{`0})">
      <summary>
            Converts the specified raw data values to the corresponding relative values.
            </summary>
      <param name="values">A buffer of raw data values.</param>
      <returns>
            A Buffer&lt;T&gt; containing the relative values corresponding to each of the specified raw data values in the bounds of the data mapper.
            </returns>
      <exception cref="T:System.ArgumentNullException">values (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IDataMapper`1.Map(`0)">
      <summary>
            Converts the specified raw data value to the corresponding relative value.
            </summary>
      <param name="value">A raw data value.</param>
      <returns>
            The relative value corresponding to the specified raw data value in the bounds of the data mapper, 
            or NaN if the value could not be mapped.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IDataMapper`1.InverseMap(NationalInstruments.DataInfrastructure.Buffer{System.Double},NationalInstruments.DataInfrastructure.Unit)">
      <summary>
            Converts the specified relative values to the corresponding raw data values.
            </summary>
      <param name="relativeValues">A buffer of relative values.</param>
      <param name="unit">The unit of the raw data values, used to set Unit.</param>
      <returns>
            A Buffer&lt;T&gt; containing the raw data values corresponding to each of the specified relative 
            values in the bounds of the data mapper.
            </returns>
      <exception cref="T:System.ArgumentNullException">relativeValues (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IDataMapper`1.TryInverseMap(System.Double,`0@)">
      <summary>
            Converts the specified relative value to the corresponding raw data value.
            </summary>
      <param name="relativeValue">A value relative to the corresponding raw data value.</param>
      <param name="value">
            Contains the raw data value corresponding to the specified relative value in the bounds of the data mapper 
            if the conversion succeeded, or the default value of TData (generic type parameter) if the conversion failed.
            </param>
      <returns>true if relativeValue (parameter) was converted successfully; otherwise false.</returns>
    </member>
    <member name="P:NationalInstruments.Controls.Data.IDataMapper`1.Descriptor">
      <summary>
            Gets the descriptor used by the data mapper to perform mathematical operations on raw data values.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IDataMapperProxy`1.DataMapper">
      <summary>
            Gets the proxied IDataMapper&lt;T&gt;.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Proxy.DataMapperProxy`1.Update(NationalInstruments.Controls.Data.IDataMapper{`0})" />
    <member name="M:NationalInstruments.Controls.Primitives.Proxy.DataMapperProxy`1.ToString" />
    <member name="P:NationalInstruments.Controls.Primitives.Proxy.DataMapperProxy`1.CanUpdate" />
    <member name="P:NationalInstruments.Controls.Primitives.Proxy.DataMapperProxy`1.DataMapper" />
    <member name="P:NationalInstruments.Controls.Primitives.Proxy.DataMapperProxy`1.Value" />
    <member name="T:NationalInstruments.Controls.Primitives.ReadOnlyNotifyingCollection`1">
      <summary>
            A read-only version of the NotifyingCollection&lt;T&gt;.
            </summary>
      <typeparam name="T">
            The type of elements in the list.
            </typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ReadOnlyNotifyingCollection`1.#ctor(NationalInstruments.Controls.Primitives.NotifyingCollection{`0})">
      <summary>
            Initializes a new instance of the ReadOnlyNotifyingCollection&lt;T&gt; class.
            </summary>
      <param name="collection">
            The elements in the collection.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ReadOnlyNotifyingCollection`1.ToString" />
    <member name="E:NationalInstruments.Controls.Primitives.ReadOnlyNotifyingCollection`1.CollectionChanging" />
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionGeometryVisibility">
      <summary>
            Defines the display state of a RegionGeometry.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionGeometryVisibility.Visible">
      <summary>Indicates the corresponding element should display as normal and participate in occlusion testing.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionGeometryVisibility.Occluded">
      <summary>Indicates the corresponding element has been hidden due to occlusion from an overlapping element.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionGeometryVisibility.Collapsed">
      <summary>Indicates the corresponding element should not be displayed and should not participate in occlusion testing.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider">
      <summary>
            Represents an object that contains layout settings for an element in a region.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.Invalidate(NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs)">
      <summary>Raises the Invalidated event when an external type causes a change to layout settings.</summary>
      <param name="e">A RegionLayoutInvalidatedEventArgs that contains the event data.</param>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.MinWidth">
      <summary>Gets the minimum width constraint of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.MaxWidth">
      <summary>Gets the maximum width constraint of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.MinHeight">
      <summary>Gets the minimum height constraint of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.MaxHeight">
      <summary>Gets the maximum height constraint of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.RelativeWidth">
      <summary>Gets the relative width of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.RelativeHeight">
      <summary>Gets the relative height of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.RelativeHorizontalPosition">
      <summary>Gets the relative horizontal position of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.RelativeVerticalPosition">
      <summary>Gets the relative vertical position of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.RelativeHorizontalAlignment">
      <summary>Gets the relative horizontal alignment of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.RelativeVerticalAlignment">
      <summary>Gets the relative vertical alignment of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.RelativeOrientation">
      <summary>Gets the relative orientation of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.Margin">
      <summary>Gets the outer margin of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.Padding">
      <summary>Gets the padding of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.OcclusionMargin">
      <summary>Gets the margin applied to the element for occlusion testing.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.LayoutOptions">
      <summary>Gets additional layout options to control how layout is performed on the element.</summary>
    </member>
    <member name="E:NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider.Invalidated">
      <summary>Occurs when the layout settings change.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.#ctor">
      <summary>
            Initializes a new instance of the GeometryLayoutSettingsProvider class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.OnInvalidated(NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs)">
      <summary>
            Raises the Invalidated event.
            </summary>
      <exception cref="T:System.ArgumentNullException">e (parameter) is null.
            </exception>
      <param name="e">
            An instance of RegionLayoutInvalidatedEventArgs that contains the event data.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.#ctor(NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider)">
      <summary>
            Initializes a new instance of the GeometryLayoutSettingsProvider class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.EnsureLength(System.Int32)">
      <summary>
            Ensures the NormalizedPoints collection contains the specified number of items,
            returning a value indicating whether the collection had to be changed.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.NationalInstruments#Controls#Primitives#Regions#IRegionLayoutSettingsProvider#Invalidate(NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs)" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.RelativeWidth" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.RelativeHeight" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.RelativeHorizontalPosition" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.RelativeVerticalPosition" />
    <member name="E:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.Invalidated" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.State">
      <summary>Gets or sets the RegionGeometry-defined state used to create the corresponding Geometry.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.NormalizedPoints">
      <summary>Gets the normalized point values used to create the corresponding Geometry.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider.RelativeOrientation" />
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.ContentProperty">
      <summary>
            Identifies the Content dependency property.
            </summary>
      <returns>
            The identifier for the Content dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.ContentTemplateProperty">
      <summary>
            Identifies the ContentTemplate dependency property.
            </summary>
      <returns>
            The identifier for the ContentTemplate dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.RegionProperty">
      <summary>
            Identifies the Region dependency property.
            </summary>
      <returns>
            The identifier for the Region dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.RelativeWidthProperty">
      <summary>
            Identifies the RelativeWidth dependency property.
            </summary>
      <returns>
            The identifier for the RelativeWidth dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.RelativeHeightProperty">
      <summary>
            Identifies the RelativeHeight dependency property.
            </summary>
      <returns>
            The identifier for the RelativeHeight dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.RelativeHorizontalPositionProperty">
      <summary>
            Identifies the RelativeHorizontalPosition dependency property.
            </summary>
      <returns>
            The identifier for the RelativeHorizontalPosition dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.RelativeVerticalPositionProperty">
      <summary>
            Identifies the RelativeVerticalPosition dependency property.
            </summary>
      <returns>
            The identifier for the RelativeVerticalPosition dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.RelativeHorizontalAlignmentProperty">
      <summary>
            Identifies the RelativeHorizontalAlignment dependency property.
            </summary>
      <returns>
            The identifier for the RelativeHorizontalAlignment dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.RelativeVerticalAlignmentProperty">
      <summary>
            Identifies the RelativeVerticalAlignment dependency property.
            </summary>
      <returns>
            The identifier for the RelativeVerticalAlignment dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.RelativeOrientationProperty">
      <summary>
            Identifies the RelativeOrientation dependency property.
            </summary>
      <returns>
            The identifier for the RelativeOrientation dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.PaddingProperty">
      <summary>
            Identifies the Padding dependency property.
            </summary>
      <returns>
            The identifier for the Padding dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.OcclusionMarginProperty">
      <summary>
            Identifies the OcclusionMargin dependency property.
            </summary>
      <returns>
            The identifier for the OcclusionMargin dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.LayoutOptionsProperty">
      <summary>
            Identifies the LayoutOptions dependency property.
            </summary>
      <returns>
            The identifier for the LayoutOptions dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.MinWidthProperty">
      <summary>
            Identifies the MinWidth dependency property.
            </summary>
      <returns>
            The identifier for the MinWidth dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.MaxWidthProperty">
      <summary>
            Identifies the MaxWidth dependency property.
            </summary>
      <returns>
            The identifier for the MaxWidth dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.MinHeightProperty">
      <summary>
            Identifies the MinHeight dependency property.
            </summary>
      <returns>
            The identifier for the MinHeight dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.MaxHeightProperty">
      <summary>
            Identifies the MaxHeight dependency property.
            </summary>
      <returns>
            The identifier for the MaxHeight dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentHost.MarginProperty">
      <summary>
            Identifies the Margin dependency property.
            </summary>
      <returns>
            The identifier for the Margin dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.ContentHost.OnInvalidated(NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs)">
      <summary>
            Raises the Invalidated event.
            </summary>
      <exception cref="T:System.ArgumentNullException">e (parameter) is null.
            </exception>
      <param name="e">
            An instance of RegionLayoutInvalidatedEventArgs that contains the event data.
            </param>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionGeometry">
      <summary>
            Represents a geometry layout subset defined by a RegionLayout implementation.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.ConstrainSize(System.Windows.Size,System.Windows.Size)">
      <summary>
            Constrains the default size of the geometry, based on the available size.
            </summary>
      <param name="defaultSize">
            The DefaultSize of the RegionPanel during measure,
            or the available size during arrange.
            </param>
      <param name="availableSize">The available screen size.</param>
      <returns>The DesiredSize for the geometry.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.GetChildGeometry(NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider)">
      <summary>
            Gets a geometry subset with the specified layout settings.
            </summary>
      <param name="layoutSettings">An object providing layout settings.</param>
      <returns>A geometry subset with the specified layout settings.</returns>
      <exception cref="T:System.ArgumentNullException">layoutSettings (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.GetScreenLayoutBounds">
      <summary>
            Gets the bounds to apply to the object during arrange.
            </summary>
      <returns>The bounds to apply to the object during arrange.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.UpdateElementTransform(System.Windows.Media.Transform)">
      <summary>
            Updates or creates the render transform for positioning and orienting the geometry.
            </summary>
      <param name="existingTransform">The existing transform for an element, or null.</param>
      <returns>The render transform for positioning and orienting the geometry.</returns>
      <exception cref="T:System.InvalidOperationException">
            The geometry represents a root geometry.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.RelativeToScreen(System.Windows.Point)">
      <summary>
            Maps relative coordinates to screen coordinates.
            </summary>
      <param name="point">The relative value to map.</param>
      <returns>The screen value corresponding to the given relative value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.ScreenToRelative(System.Windows.Point)">
      <summary>
            Maps screen coordinates to relative coordinates.
            </summary>
      <param name="point">The screen value to map.</param>
      <returns>The relative value corresponding to the given screen value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.RelativeToScreen(System.Windows.Point[])">
      <summary>
            Maps relative coordinates to screen coordinates.
            </summary>
      <param name="points">The relative values to map.</param>
      <returns>The input array with the relative coordinates mapped to screen coordinates.</returns>
      <exception cref="T:System.ArgumentNullException">points (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.ScreenToRelative(System.Windows.Point[])">
      <summary>
            Maps screen coordinates to relative coordinates.
            </summary>
      <param name="points">The screen values to map.</param>
      <returns>The input array with the screen coordinates mapped to relative coordinates.</returns>
      <exception cref="T:System.ArgumentNullException">points (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.RelativeToScreen(System.Collections.Generic.IList{System.Windows.Point})" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.ScreenToRelative(System.Collections.Generic.IList{System.Windows.Point})" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.RelativeToScreenInplace(System.Windows.Point[])" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.ScreenToRelativeInplace(System.Windows.Point[])" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.GetFrameworkGeometry(System.Windows.Point,System.Windows.Point[])">
      <summary>
            Gets a Geometry representing the shape defined by the given points.
            </summary>
      <param name="start">The first point in the shape</param>
      <param name="points">The relative values defining a shape.</param>
      <returns>A geometry representing the shape defined by points (parameter).</returns>
      <exception cref="T:System.ArgumentNullException">points (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">points (parameter) is empty.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.InvalidateLayoutSettings(NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs)">
      <summary>
            Invalidates the settings indicated by the specified RegionLayoutInvalidatedEventArgs.
            </summary>
      <param name="e">A RegionLayoutInvalidatedEventArgs that contains the event data.</param>
      <returns>A value indicating whether a re-measure is required for the new layout settings to take effect.</returns>
      <exception cref="T:System.ArgumentNullException">e (parameter) is null.</exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.ToString" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.#ctor(NationalInstruments.Controls.Primitives.Regions.RegionGeometry,NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider)">
      <summary>Initializes a new instance of the RegionGeometry class.</summary>
      <param name="parent">The parent of this geometry.</param>
      <param name="layoutSettings">The layout settings this geometry was created with.</param>
      <exception cref="T:System.ArgumentNullException">layoutSettings (parameter) is null.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.Parent">
      <summary>Gets the parent of this geometry.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.LayoutSettings">
      <summary>Gets the layout settings this geometry was created with.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.Visibility">
      <summary>Gets or sets the visibility of the geometry.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionGeometry.DesiredSize">
      <summary>Gets or sets the desired screen size.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianGeometry.GetTransformMatrix(System.Windows.Point,System.Double,System.Double,System.Double)">
      <summary>Calculates the transform matrix used to position and orient the layout bounds on the screen.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds">
      <summary>
            Represents the layout constraints associated with an object in a Radial region.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.GetExteriorRect(System.Double,NationalInstruments.Controls.Primitives.Regions.Internal.GeometryLayoutSettingsProvider)">
      <summary>Gets the oriented exterior bounds covering the object and all children.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.GetUnitExteriorSize">
      <summary>Gets the oriented exterior bounds covering the object and all children at a unit radius of one.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.Dirty(NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider,NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings)">
      <summary>Dirties the bounds with the changed settings from the layout settings provider, returning dirty state flags for the parent.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.Dirty(System.Int32)">
      <summary>Dirties the bounds with the specified flags from the child.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.ApplyDesiredSize(System.Windows.Size)">
      <summary>Updates the bounds with the object's desired and offset size.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AggregateChildDesiredBounds(NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds@,System.Double)">
      <summary>Adjusts the interior size to accommodate the offset relative size of the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
      <param name="baseAngle">The angle the element is oriented to.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AggregateChildDesiredBounds(NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds@,System.Double)">
      <summary>Adjusts the interior size to accommodate the offset relative size of the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
      <param name="baseAngle">The angle the element is oriented to.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.DesiredCalculationComplete">
      <summary>Resets the state of IsDesiredCalculationDirty.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.ApplyParentSize(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Calculates relative sizes and positions from the parent's size, and applies maximum size constraints.</summary>
      <param name="height">The vertical size of the parent area.</param>
      <param name="sweep">The relative sweep angle of the parent area.</param>
      <param name="offset">The total AreaOffset of other AreaIdentifier bounds that have already been processed.</param>
      <param name="layoutFlags">The layout flags for the parent area.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AggregateChildFinalBounds(NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds@)">
      <summary>Adjusts the bounds of the largest area covered by the object to include the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AggregateChildFinalBounds(NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds@)">
      <summary>Adjusts the bounds of the largest area covered by the object to include the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.FinalCalculationComplete">
      <summary>Resets the state of IsFinalCalculationDirty.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.ApplyRadiusOffset(System.Double)">
      <summary>Resets the state of IsFinalCalculationDirty.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.RelativeToLocal(System.Windows.Point,System.Double,System.Double)">
      <summary>Calculates the local aligned point corresponding to the given relative point.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.RelativeToAbsolute(System.Windows.Point,System.Double)">
      <summary>Calculates the absolute aligned point corresponding to the given relative point.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AbsoluteToRelative(System.Windows.Point,System.Double)">
      <summary>Calculates the relative point corresponding to the given absolute point.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.Orient(System.Double)">
      <summary>Aligns an angle representing the screen orientation of the bounds at a given position with the the orientation for a child at that position.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.IsHorizontalUIAngle(System.Double)">
      <summary>Tests whether the the specified angle is close to the UI definition of horizontal (near 0 or 180 degrees).</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AggregateContentChildDesiredBounds(System.Windows.Size,System.Double,System.Boolean,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@)">
      <summary>Aggregates the bounds of the specified oriented content child.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.UpdateChildMinimumOffsets(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,System.Double,System.Double,System.Boolean)">
      <summary>Updates the local or parent offset offset fields with the specified child offset offset values.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.PullChildMinimumOffsets(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@)">
      <summary>Takes the parent offset offset values from the specified child.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AggregateChildMinimumOffsets(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,System.Double,NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutFlags)">
      <summary>
            Updates the local or parent offset offset fields by the amount the given child overhangs our bounds,
            and pull the child's offset offset values.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AggregateEdgeSize(NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@)">
      <summary>Updates the size and position offsets to account for the vertical size required by an edge.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.IsEdge">
      <summary>Gets a value indicating whether this represents the bounds for an edge.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.ChildLayoutFlags">
      <summary>Gets a set of internal flags indicating how children should be arranged.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.ChildHeight">
      <summary>Gets the area children are positioned within.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.ExteriorOffset">
      <summary>Gets the offset from the exterior position to the interior position.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.ExteriorHeight">
      <summary>Gets the exterior height covering the object and all children.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AreaIdentifier">
      <summary>Gets a value identifying the kind of area represented by the bounds.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AreaOffset">
      <summary>Gets the offset for siblings related to this area.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AreaBaseAngle">
      <summary>Gets the base rotation angle for this area.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AreaRelativeSweepAngle">
      <summary>Gets the relative base sweep angle for this area, or NaN if the sweep angle is not defined.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.AreaRelativeBaseAngle">
      <summary>Gets the relative base rotation angle for this area.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.IsDesiredCalculationDirty">
      <summary>Gets a value indicating whether the desired size of the bounds is dirty.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.IsFinalCalculationDirty">
      <summary>Gets a value indicating whether the final size of the bounds is dirty.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RadialBounds.EdgeChildOrientationFlag">
      <summary>Gets the orientation flag to use when aggregating child edge bounds.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialGeometry.RelativeToScreenCore(NationalInstruments.Controls.Primitives.Regions.Internal.RegionGeometryBase,System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
      <summary>Calculates the screen point corresponding to the given relative point.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialGeometry.ScreenToRelativeCore(NationalInstruments.Controls.Primitives.Regions.Internal.RegionGeometryBase,System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
      <summary>Calculates the relative point corresponding to the given screen point.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RadialGeometry.GetTransformMatrix(System.Windows.Point,NationalInstruments.Controls.Primitives.Regions.Internal.RadialGeometry,System.Double,NationalInstruments.Controls.Primitives.Regions.Internal.CartesianGeometry)">
      <summary>Calculates the transform matrix used to position and orient a Cartesian child on the screen.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionPanelOperations.#ctor(NationalInstruments.Controls.Primitives.Regions.Internal.IRegionPanel)">
      <summary>
            Initializes a new instance of the RegionPanelOperations class with the specified target.
            </summary>
      <param name="target">
            The target to operate on.
            </param>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionPanelOperations.Target">
      <summary>
            Gets the target to operate on.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionPanelOperations.FallbackLayout">
      <summary>
            Gets or sets the layout to use if Layout is null.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionPanelOperations.LayoutSettingsListener">
      <summary>
            Gets or sets the listener for the Invalidated event.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionPanelOperations.Quad.AreSeparate(NationalInstruments.Controls.Primitives.Regions.Internal.RegionPanelOperations.Quad@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionPanelOperations.Quad@)">
      <summary>Determines whether the two quadrilaterals are separate or overlapping.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MultiEnumerator.MoveNext" />
    <member name="M:NationalInstruments.Controls.Internal.MultiEnumerator.System#Collections#IEnumerator#Reset" />
    <member name="P:NationalInstruments.Controls.Internal.MultiEnumerator.Current" />
    <member name="T:NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutSettingsProvider">
      <summary>Contains members for retrieving layout settings from element attached properties.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutSettingsProvider.GetProvider(System.Windows.UIElement)">
      <summary>
            Gets an IRegionLayoutSettingsProvider instance for the given UIElement.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutSettingsProvider.GetFrameworkElementLayoutPropertyListeners(System.Windows.FrameworkElement,System.EventHandler{NationalInstruments.Controls.Internal.DependencyPropertyListenerChangedEventArgs})">
      <summary>
            Gets a collection of dependency property listeners for the layout properties exposed by FrameworkElement.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutSettingsProvider.IsDefinition(NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider)">
      <summary>
            Gets a value indicating whether the specified layout settings correspond to a root element, layout definition, or framework geometry.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutSettingsProvider.SavedProviderProperty">
      <summary>
            Identifies the SavedProvider attached property.
            </summary>
      <returns>
            The identifier for the SavedProvider attached property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutSettingsProvider.GetSavedProvider(System.Windows.UIElement)">
      <summary>
            Gets the value of the SavedProvider attached property for a specified UIElement.
            </summary>
      <returns>
            The SavedProvider property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutSettingsProvider.SetSavedProvider(System.Windows.UIElement,NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider)">
      <summary>
            Sets the value of the SavedProvider attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed IRegionLayoutSettingsProvider value.
            </param>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.Internal.Relative">
      <summary>Represents a relative value.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.Value">
      <summary>The relative value.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the Relative struct with the specified relative value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.ToString" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.ToString(NationalInstruments.Controls.RelativeAlignment)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.Apply(System.Double,System.Boolean,System.Double@)">
      <summary>
            If the relative value is valid, applies the relative value to the reference length and assigns the resulting absolute value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.InverseApply(System.Double)">
      <summary>
            If the relative value is valid, returns the reference value that would result in the given absolute value when the relative value is applied.
            Otherwise, returns the given absolute value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.Align(System.Double,NationalInstruments.Controls.RelativeAlignment,System.Double)">
      <summary>
            Aligns the absolute value against the reference length.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.GetInverseAlignment(NationalInstruments.Controls.RelativeAlignment)">
      <summary>
            Returns the inverse of the specified alignment.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.op_Implicit(System.Double)~NationalInstruments.Controls.Primitives.Regions.Internal.Relative">
      <summary>
            Creates a new Relative instance from a Double value.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.Relative.IsValid">
      <summary>
            Gets a value indicating whether Value is a valid relative value.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds">
      <summary>
            Represents the layout constraints associated with an object in a Cartesian region.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.Dirty(NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider,NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings)">
      <summary>Dirties the bounds with the changed settings from the layout settings provider, returning dirty state flags for the parent.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.Dirty(System.Int32)">
      <summary>Dirties the bounds with the specified flags from the child.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.GetLayoutModeFlags(NationalInstruments.Controls.Primitives.Regions.CartesianLayoutMode)">
      <summary>Gets the layout flags that represent the specified layout mode.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.GetNonCartesianParentFlags">
      <summary>Gets the layout flags that represent a non-Cartesian parent.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.IsOrientationInverted(System.Int32)">
      <summary>Gets a value indicating whether the InvertOrientation flag was used to construct the specified layout flags.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.ForceDesiredSize(System.Windows.Size)">
      <summary>Updates the bounds with the object's desired size.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.ApplyDesiredSize(System.Windows.Size)">
      <summary>Updates the bounds with the object's desired and minimum size.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AggregateChildDesiredBounds(NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds@,System.Double)">
      <summary>Adjusts the interior size to accommodate the minimum relative size of the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
      <param name="baseAngle">The angle the element is oriented to.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.DesiredCalculationComplete">
      <summary>Resets the state of IsDesiredCalculationDirty.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.ApplyParentSize(System.Windows.Size,System.Double,System.Int32)">
      <summary>Calculates relative sizes and positions from the parent's size, and applies maximum size constraints.</summary>
      <param name="parent">The size of the parent area.</param>
      <param name="offset">The total AreaOffset of other AreaIdentifier bounds that have already been processed.</param>
      <param name="layoutFlags">The layout flags for the parent area.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AggregateChildFinalBounds(NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds@)">
      <summary>Adjusts the bounds of the largest area covered by the object to include the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.FinalCalculationComplete">
      <summary>Resets the state of IsFinalCalculationDirty.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.RelativeToLocal(System.Windows.Point,System.Double,System.Double)">
      <summary>Calculates the local, unaligned absolute point corresponding to the given relative point.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.RelativeToAbsolute(System.Windows.Point)">
      <summary>Calculates the absolute aligned point corresponding to the given relative point.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AbsoluteToRelative(System.Windows.Point)">
      <summary>Calculates the relative point corresponding to the given absolute point.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.OrientPoint(System.Windows.Point)">
      <summary>Aligns a point with the screen orientation of the bounds.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.OrientSize(System.Double@,System.Double@)">
      <summary>Aligns a size with the relative orientation of the bounds.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.IsHorizontalUIAngle(System.Double)">
      <summary>Tests whether the the specified angle is close to the UI definition of horizontal (near 0 or 180 degrees).</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AggregateContentChildDesiredBounds(System.Windows.Size,System.Boolean,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@)">
      <summary>Aggregates the bounds of the specified oriented content child.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.UpdateChildMinimumOffsets(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,System.Double,System.Double,System.Boolean)">
      <summary>Updates the local or parent minimum offset fields with the specified child minimum offset values.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.PullChildMinimumOffsets(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@)">
      <summary>Takes the parent minimum offset values from the specified child.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AggregateChildMinimumOffsets(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,System.Double,NationalInstruments.Controls.Primitives.Regions.Internal.RegionLayoutFlags)">
      <summary>
            Updates the local or parent minimum offset fields by the amount the given child overhangs our bounds,
            and pull the child's minimum offset values.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AggregateEdgeSize(NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds@,NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@)">
      <summary>Updates the size and position offsets to account for the vertical size required by an edge.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.IsEdge">
      <summary>Gets a value indicating whether this represents the bounds for an edge.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.IsIsolated">
      <summary>Gets a value indicating whether the bounds has the IsolateInvalidation layout option.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.SmoothRotation">
      <summary>Gets a value indicating whether rotation should be smoothed.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.ChildLayoutFlags">
      <summary>Gets a set of internal flags indicating how children should be arranged.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.ChildArea">
      <summary>Gets the area children are positioned within.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.InteriorOffset">
      <summary>Gets the offset from interior position to the child area.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.ExteriorOffset">
      <summary>Gets the offset from the exterior position to the interior position.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.ExteriorHeight">
      <summary>Gets the exterior height covering the object and all children.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.ExteriorRect">
      <summary>Gets the oriented exterior bounds covering the object and all children.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AreaIdentifier">
      <summary>Gets a value identifying the kind of area represented by the bounds.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AreaOffset">
      <summary>Gets the offset for siblings related to this area.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.AreaBaseAngle">
      <summary>Gets the base rotation angle for this area.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.IsDesiredCalculationDirty">
      <summary>Gets a value indicating whether the desired size of the bounds is dirty.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.IsFinalCalculationDirty">
      <summary>Gets a value indicating whether the final size of the bounds is dirty.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.CartesianBounds.EdgeChildOrientationFlag">
      <summary>Gets the orientation flag to use when aggregating child edge bounds.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension">
      <summary>
            Represents the layout constraints associated with one horizontal or vertical dimension on an object in a region.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ApplyMinimumConstraints">
      <summary>Applies minimum size constraints derived from spacing values, and initializes the interior extreme positions accordingly.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.AggregateChildMinimumDimension(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,System.Double)">
      <summary>Adjusts InteriorSizeAbsolute to accommodate the minimum relative size of the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
      <param name="childInteriorSizeAbsolute">The aligned interior size of the child.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.UpdateExtremePositions(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,System.Double,System.Boolean)">
      <summary>Updates the extreme interior positions to accommodate the size of the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
      <param name="childInteriorSizeAbsolute">The aligned interior size of the child.</param>
      <param name="invertAlignment">Indicates whether the child's alignment should be inverted before the update.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.GetChildOverhang(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@,System.Double,System.Boolean,System.Double@,System.Double@)">
      <summary>Gets the amount that a child spills over the parent bounds.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
      <param name="childInteriorSizeAbsolute">The aligned interior size of the child.</param>
      <param name="invertAlignment">Indicates whether the child's alignment should be inverted before the update.</param>
      <param name="nearOverhang">The amount the child overhangs on the near side.</param>
      <param name="farOverhang">The amount the child overhangs on the far side.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.UpdateOffsets">
      <summary>Updates the size and position offsets with the last overhang and minimum values, if set.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ApplyParentDimension(System.Double,System.Boolean)">
      <summary>Resolves relative sizes and positions against the parent's child area size.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ApplyParentSize(System.Double)">
      <summary>Resolves relative sizes against the parent's child area size.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ApplyParentPosition(System.Double,System.Boolean)">
      <summary>Resolves relative positions against the parent's child area size.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ApplyMaximumConstraints">
      <summary>Applies size constraints to InteriorSizeAbsolute size, and initializes the exterior extreme positions accordingly.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.AggregateChildFinalDimension(NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension@)">
      <summary>Adjusts the bounds of the largest area covered by the object to include the child.</summary>
      <param name="child">The child bounds to aggregate (passed by reference to avoid unnecessary copying).</param>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.AlignedInteriorPosition">
      <summary>Gets the absolute position of the object, aligned according to InteriorPositionAlignment against the current InteriorSizeAbsolute size.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.InteriorSpacing">
      <summary>Gets the padding and margin contained within InteriorSizeAbsolute of the object.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.InteriorNearSpacing">
      <summary>Gets the padding and margin contained within InteriorSizeAbsolute of the object on the near side.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.InteriorFarSpacing">
      <summary>Gets the padding and margin contained within InteriorSizeAbsolute of the object on the far side.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ChildArea">
      <summary>Gets the area children are positioned within.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.LargestExteriorSize">
      <summary>Gets the largest area covered by the object or its children.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ExteriorSpacing">
      <summary>Gets the padding and margin outside InteriorSizeAbsolute of the object.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ExteriorNearSpacing">
      <summary>Gets the padding and margin outside InteriorSizeAbsolute of the object on the near side.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ExteriorFarSpacing">
      <summary>Gets the padding and margin outside InteriorSizeAbsolute of the object on the far side.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.SizeOffset">
      <summary>Gets the total size taken up by near and far edge children, if any.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.Internal.RegionDimension.ExteriorSizeAbsolute">
      <summary>Gets the full area covered by the control, including exterior spacing that overlaps with the parent.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.Default`1.EmptyArray">
      <summary>Gets a cached instance of a zero-length array of TData (generic type parameter) values.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Default`1.Range">
      <summary>Gets the default range used to assign the Range property for a new data mapper.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Default`1.Descriptor">
      <summary>Gets the default descriptor instance from DataTypeDescriptors, cast to the desired type.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Default`1.Comparer">
      <summary>Gets the default descriptor instance from DataTypeDescriptors, cast to the desired type.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Default`1.Formatter">
      <summary>Gets the default descriptor instance from DataTypeDescriptors, cast to the desired type.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.IWeakEventListener`1">
      <summary>Represents a listener for a weak event.</summary>
      <typeparam name="TSource">Type type of object raising the event.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.IWeakEventListener`1.Add(`0)">
      <summary>Registers the weak event to a source.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.IWeakEventListener`1.Remove(`0)">
      <summary>Unregisters the weak event from a source.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.IWeakEventListener`1.Replace(`0,`0)">
      <summary>Moves the weak event registration from the old source to the new source.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Error(System.Exception)">
      <summary>Logs an Error-level message.</summary>
      <param name="exception">The exception error.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Error(System.String,System.Exception)">
      <summary>Logs an Error-level message.</summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="exception">The exception error.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Verbose(System.String,System.String)">
      <summary>
            Logs a Verbose-level message.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="message">
            The  message.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Verbose(System.String,System.String,System.Object)">
      <summary>
            Logs a Verbose-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Verbose(System.String,System.String,System.Object,System.Object)">
      <summary>
            Logs a Verbose-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
      <param name="arg2">Format argument 2 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Verbose(System.String,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a Verbose-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
      <param name="arg2">Format argument 2 to format (parameter).</param>
      <param name="arg3">Format argument 3 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Verbose(System.String,System.String,System.Object[])">
      <summary>Logs a Verbose-level message with string formatting.</summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">The format string to used to create the message.</param>
      <param name="args">Format arguments to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Info(System.String,System.String)">
      <summary>
            Logs an Info-level message.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="message">
            The  message.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Info(System.String,System.String,System.Object)">
      <summary>
            Logs an Info-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Info(System.String,System.String,System.Object,System.Object)">
      <summary>
            Logs an Info-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
      <param name="arg2">Format argument 2 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Info(System.String,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs an Info-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
      <param name="arg2">Format argument 2 to format (parameter).</param>
      <param name="arg3">Format argument 3 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Info(System.String,System.String,System.Object[])">
      <summary>Logs an Info-level message with string formatting.</summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">The format string to used to create the message.</param>
      <param name="args">Format arguments to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Warning(System.String,System.String)">
      <summary>
            Logs a Warning-level message.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="message">
            The  message.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Warning(System.String,System.String,System.Object)">
      <summary>
            Logs a Warning-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Warning(System.String,System.String,System.Object,System.Object)">
      <summary>
            Logs a Warning-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
      <param name="arg2">Format argument 2 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Warning(System.String,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a Warning-level message with string formatting.
            </summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
      <param name="arg2">Format argument 2 to format (parameter).</param>
      <param name="arg3">Format argument 3 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Warning(System.String,System.String,System.Object[])">
      <summary>Logs a Warning-level message with string formatting.</summary>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">The format string to used to create the message.</param>
      <param name="args">Format arguments to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String)">
      <summary>A thread-safe method to log a message asynchronously.</summary>
      <param name="level">The level at which to log a message.</param>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="message">
            The  message.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object)">
      <summary>A thread-safe method to log a message asynchronously.</summary>
      <param name="level">The level at which to log a message.</param>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object,System.Object)">
      <summary>A thread-safe method to log a message asynchronously.</summary>
      <param name="level">The level at which to log a message.</param>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
      <param name="arg2">Format argument 2 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object,System.Object,System.Object)">
      <summary>A thread-safe method to log a message asynchronously.</summary>
      <param name="level">The level at which to log a message.</param>
      <param name="category">The message category (for non-public classes this should not be the class name).</param>
      <param name="format">
            The format string used to create the message.
            </param>
      <param name="arg1">Format argument 1 to format (parameter).</param>
      <param name="arg2">Format argument 2 to format (parameter).</param>
      <param name="arg3">Format argument 3 to format (parameter).</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Log.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object[])">
      <summary>A thread-safe method to log a message asynchronously.</summary>
      <param name="level">The level at which to log a message.</param>
      <param name="category">The message category.</param>
      <param name="format">The format string to use to create the message.</param>
      <param name="args">Format arguments to format (parameter).</param>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Log.IsVerboseEnabled">
      <summary>Gets a value indicating whether Verbose-level messages are being logged.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Log.IsInfoEnabled">
      <summary>Gets a value indicating whether Info-level messages are being logged.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Log.IsWarningEnabled">
      <summary>Gets a value indicating whether Warning-level messages are being logged.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.Log.IsErrorEnabled">
      <summary>Gets a value indicating whether Error-level messages are being logged.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.FigureCreator">
      <summary>Implementation used by PointShape and TickShape.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.Throttle">
      <summary>Contains methods for throttling how frequently an event handler will receive an event.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Throttle.MouseEvent(System.EventHandler{System.Windows.Input.MouseEventArgs})">
      <summary>Throttles the number of events that a MouseEventHandler will receive to the screen refresh rate.</summary>
      <param name="eventHandler">The event handler to throttle.</param>
      <returns>An event handler that will call eventHandler (parameter) at most once per screen frame.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Throttle.Event``1(System.EventHandler{``0})">
      <summary>Throttles the number of events that an event handler will receive to the screen refresh rate.</summary>
      <typeparam name="TEventArgs">The type of event handler args.</typeparam>
      <param name="eventHandler">The event handler to throttle.</param>
      <returns>An event handler that will call eventHandler (parameter) at most once per screen frame.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.Throttle.ToReferenceEvent``1(System.EventHandler{``0},System.Func{System.EventHandler{System.EventArgs},System.IDisposable})">
      <summary>[Advanced] Throttles the number of events that an event handler will receive to an arbitrary reference event.</summary>
      <typeparam name="TEventArgs">The type of event handler args.</typeparam>
      <param name="eventHandler">The event handler to throttle.</param>
      <param name="referenceEvent">The reference event that must occur before eventHandler (parameter) will be called.</param>
      <returns>An event handler that will call eventHandler (parameter) at most once per reference event.</returns>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.UsesWeakReferencesAttribute">
      <summary>Indicates a class uses weak references to listed to events on an object.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateCompositionTargetRenderingListener(System.EventHandler{System.EventArgs})">
      <summary>
            Adds a weak event listener to the Rendering event.
            </summary>
      <param name="handler">The handler called when the event is raised.</param>
      <returns>
            An object representing the weak event registration, which can be used to unregister the event.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.BindToSource``1(NationalInstruments.Controls.Internal.IWeakEventListener{``0},``0)">
      <summary>
            Binds a weak event listener to a single source, which will unregister the weak event when disposed.
            </summary>
      <typeparam name="TSource">The type of object raising the event.</typeparam>
      <param name="listener">A weak event listener.</param>
      <param name="source">The object raising the event.</param>
      <returns>An object that can be used to unregister the the weak event listener from the source.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateListener``2(NationalInstruments.Controls.Internal.WeakEvent.IWeakEventManager{``0},System.EventHandler{``1})">
      <summary>Creates a weak event listener for the given manager and event handler.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateStaticListener``1(NationalInstruments.Controls.Internal.WeakEvent.IWeakEventManager{System.Object},System.EventHandler{``0},System.Object)">
      <summary>Creates a weak event listener for a static event for the given manager and event handler.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateScaleInvalidatedListener(System.EventHandler{System.EventArgs})">
      <summary>
            Adds a weak event listener to the Invalidated event.
            </summary>
      <param name="handler">The handler called when the event is raised.</param>
      <returns>
            An object representing the weak event registration, which can be used to register and unregister the event.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateDataMapperChangedListener(System.EventHandler{NationalInstruments.Controls.Data.DataMapperChangedEventArgs})">
      <summary>
            Adds a weak event listener to the DataMapperChanged event.
            </summary>
      <param name="handler">The handler called when the event is raised.</param>
      <returns>
            An object representing the weak event registration, which can be used to register and unregister the event.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateCollectionChangedListener(System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>
            Adds a weak event listener to the CollectionChanged event.
            </summary>
      <param name="handler">The handler called when the event is raised.</param>
      <returns>
            An object representing the weak event registration, which can be used to register and unregister the event.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateCollectionChangingListener(System.EventHandler{NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs})">
      <summary>
            Adds a weak event listener to the CollectionChanging event.
            </summary>
      <param name="handler">The handler called when the event is raised.</param>
      <returns>
            An object representing the weak event registration, which can be used to register and unregister the event.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateRegionLayoutSettingsProviderInvalidatedListener(System.EventHandler{NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs})">
      <summary>
            Adds a weak event listener to the Invalidated event.
            </summary>
      <param name="handler">The handler called when the event is raised.</param>
      <returns>
            An object representing the weak event registration, which can be used to register and unregister the event.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateDispatcherTimerTickListener(System.EventHandler{System.EventArgs})">
      <summary>
            Adds a weak event listener to the Tick event.
            </summary>
      <param name="handler">The handler called when the event is raised.</param>
      <returns>
            An object representing the weak event registration, which can be used to register and unregister the event.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.WeakEvent.CreateCompositionTargetRenderingListener(System.EventHandler{System.EventArgs},System.Object)">
      <summary>
            Adds a weak event listener to the Rendering event.
            </summary>
      <param name="handler">The handler called when the event is raised.</param>
      <param name="source">The sender object for the event.</param>
      <returns>
            An object representing the weak event registration, which can be used to unregister the event.
            </returns>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.IWeakEventManager`1">
      <summary>Represents a nested WeakEventManager implementation.</summary>
      <typeparam name="TSource">The type of the object raising the event.</typeparam>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.WeakEventListener`2">
      <summary>Represents a weak event registration.</summary>
      <typeparam name="TSource">The type of the object raising the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event args.</typeparam>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.BoundWeakEventListener`1">
      <summary>Wraps a weak event listener for a static event.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.ScaleInvalidatedEventManager">
      <summary>Weak event manager for the Invalidated event.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.DataMapperChangedEventManager">
      <summary>Weak event manager for the DataMapperChanged event.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.CollectionChangedEventManager">
      <summary>Weak event manager for the CollectionChanged event.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.CollectionChangingEventManager">
      <summary>Weak event manager for the CollectionChanging event.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.RegionLayoutSettingsProviderInvalidatedEventManager">
      <summary>Weak event manager for the Invalidated event.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.DispatcherTimerTickEventManager">
      <summary>Weak event manager for the Tick event.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.WeakEvent.CompositionTargetRenderingEventManager">
      <summary>Weak event manager for the Rendering event.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.IRange">
      <summary>
            Represents a closed range of data values.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.IRange.GetMinimum">
      <summary>
            Retrieves a boxed copy of the Minimum value of the range.
            </summary>
      <returns>
            An object representing the minimum value of the range.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.IRange.GetMaximum">
      <summary>
            Retrieves a boxed copy of the Maximum value of the range.
            </summary>
      <returns>
            An object representing the maximum value of the range.
            </returns>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IRange.DataType">
      <summary>
            Gets the data type of the range.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IRange.IsEmpty">
      <summary>
            Gets a value indicating whether the range is empty.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IRange.IsInfinite">
      <summary>
            Gets a value indicating whether Minimum or Maximum is infinite.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionLayout">
      <summary>
            Represents a strategy for performing layout on objects in a region.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayout.EmptyLayoutSettings">
      <summary>
            Gets an IRegionLayoutSettingsProvider instance with default settings.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayout.#ctor">
      <summary>
            Initializes a new instance of the RegionLayout class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayout.CreateRootGeometry(NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider)">
      <summary>
            Gets a new root geometry for performing layout on objects.
            </summary>
      <param name="layoutSettings">An object providing layout settings.</param>
      <returns>A new root geometry for performing layout on objects.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayout.ToString" />
    <member name="F:NationalInstruments.Controls.Primitives.Regions.CartesianLayout.LayoutModeProperty">
      <summary>
            Identifies the LayoutMode dependency property.
            </summary>
      <returns>
            The identifier for the LayoutMode dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.CartesianLayout.AspectRatioProperty">
      <summary>
            Identifies the AspectRatio dependency property.
            </summary>
      <returns>
            The identifier for the AspectRatio dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.CartesianLayout.CreateInstanceCore" />
    <member name="T:NationalInstruments.Controls.Primitives.Regions.ContentDefinition">
      <summary>
            Represents a content area inside of a RegionPanel.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition">
      <summary>
            Defines the common options available for ContentDefinition and EdgeDefinition layout definitions.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MinWidthProperty">
      <summary>
            Identifies the MinWidth dependency property.
            </summary>
      <returns>
            The identifier for the MinWidth dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MaxWidthProperty">
      <summary>
            Identifies the MaxWidth dependency property.
            </summary>
      <returns>
            The identifier for the MaxWidth dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MinHeightProperty">
      <summary>
            Identifies the MinHeight dependency property.
            </summary>
      <returns>
            The identifier for the MinHeight dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MaxHeightProperty">
      <summary>
            Identifies the MaxHeight dependency property.
            </summary>
      <returns>
            The identifier for the MaxHeight dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MarginProperty">
      <summary>
            Identifies the Margin dependency property.
            </summary>
      <returns>
            The identifier for the Margin dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.OnInvalidated(NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs)">
      <summary>
            Raises the Invalidated event.
            </summary>
      <exception cref="T:System.ArgumentNullException">e (parameter) is null.
            </exception>
      <param name="e">
            An instance of RegionLayoutInvalidatedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.RelativeWidth">
      <summary>Gets the value for  the RelativeWidth member.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.RelativeHeight">
      <summary>Gets the value for  the RelativeHeight member.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.RelativeHorizontalPosition">
      <summary>Gets the value for  the RelativeHorizontalPosition member.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.RelativeVerticalPosition">
      <summary>Gets the value for  the RelativeVerticalPosition member.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.RelativeHorizontalAlignment">
      <summary>Gets the value for  the RelativeHorizontalAlignment member.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.RelativeVerticalAlignment">
      <summary>Gets the value for  the RelativeVerticalAlignment member.</summary>
    </member>
    <member name="E:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.Invalidated">
      <summary>Occurs when a layout setting is invalidated.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.Owner">
      <summary>
            Gets or sets the owning panel of this definition.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MinWidth">
      <summary>Gets or sets the minimum allowable screen width of the layout definition.</summary>
      <exception cref="T:System.ArgumentException">value (parameter) is NaN, PositiveInfinity, or less than zero.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MaxWidth">
      <summary>Gets or sets the maximum allowable screen width of the layout definition.</summary>
      <exception cref="T:System.ArgumentException">value (parameter) is less than zero.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MinHeight">
      <summary>Gets or sets the minimum allowable screen height of the layout definition.</summary>
      <exception cref="T:System.ArgumentException">value (parameter) is NaN, PositiveInfinity, or less than zero.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.MaxHeight">
      <summary>Gets or sets the maximum allowable screen height of the layout definition.</summary>
      <exception cref="T:System.ArgumentException">value (parameter) is less than zero.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition.Margin">
      <summary>Gets or sets the amount of shared space around the layout definition.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.#ctor">
      <summary>
            Initializes a new instance of the ContentDefinition class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.ToString" />
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.RelativeOffsetProperty">
      <summary>
            Identifies the RelativeOffset dependency property.
            </summary>
      <returns>
            The identifier for the RelativeOffset dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.RelativeLengthProperty">
      <summary>
            Identifies the RelativeLength dependency property.
            </summary>
      <returns>
            The identifier for the RelativeLength dependency property.
            </returns>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.RelativeWidth" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.RelativeHeight" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.RelativeHorizontalPosition" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.RelativeVerticalPosition" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.RelativeOffset">
      <summary>Gets or sets the relative start of the content definition within its parent.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.ContentDefinition.RelativeLength">
      <summary>Gets or sets the relative length of the content definition within its parent.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionFrameworkGeometry.#ctor(System.Func{NationalInstruments.Controls.Primitives.Regions.RegionFrameworkGeometry,System.Windows.Media.Geometry},NationalInstruments.Controls.Primitives.Regions.RegionGeometry,NationalInstruments.Controls.Primitives.Regions.IRegionLayoutSettingsProvider)" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionFrameworkGeometry.GetGeometry" />
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo">
      <summary>
            Represents the collection of UI elements generated by an IRegionChild.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo.#ctor(NationalInstruments.Controls.Primitives.Regions.IRegionChild,NationalInstruments.Controls.Primitives.Regions.RegionGeometry)">
      <summary>
            Initializes a new instance of the RegionChildLayoutInfo class with the specified region child and parent geometry.
            </summary>
      <param name="child">The child element.</param>
      <param name="parentGeometry">The parent geometry of the element.</param>
      <exception cref="T:System.ArgumentNullException">parentGeometry (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo.MeasureReferenceElement(System.Windows.UIElement)">
      <summary>Measures the desired size of the element.</summary>
      <param name="referenceElement">The UIElement that is to be measured</param>
      <returns>The desired size of the reference element.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo.ToString" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo.#ctor(NationalInstruments.Controls.Primitives.Regions.IRegionChild)" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo.ParentGeometry">
      <summary>Gets the parent geometry of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo.Child">
      <summary>Gets the child element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo.Elements">
      <summary>Gets the collection of generated UI elements.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo.LayoutSettingsListener">
      <summary>
            Gets or sets the listener for the Invalidated event.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionElement">
      <summary>
            Represents a hosted element and its bounds in a region.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionElement.FromUIElementSettings(System.Windows.UIElement,NationalInstruments.Controls.Primitives.Regions.RegionGeometry)">
      <summary>
            Creates a RegionElement using the RegionPanel attached properties defined on the specified UIElement to get a child geometry.
            </summary>
      <param name="element">A UI element.</param>
      <param name="parentBounds">The parent geometry of the element.</param>
      <returns>A RegionElement for element (parameter).</returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
              -or-

parentBounds (parameter) is null.

-or-parentBounds (parameter) is null.</exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionElement.ForceImmediateLayout">
      <summary>
            Performs immediate layout on Element using Bounds.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionElement.ToString" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionElement.#ctor(System.Windows.UIElement,NationalInstruments.Controls.Primitives.Regions.RegionGeometry,System.Action{NationalInstruments.Controls.Primitives.Regions.RegionElement})">
      <summary>Initializes a new instance of the RegionElement class with the specified UI element, bounds, and initializer method.</summary>
      <param name="element">The element hosted in a region.</param>
      <param name="bounds">The bounds of the element.</param>
      <param name="delayedInitializer">A method used to initialize the element at the end of the initialization pass, or null.</param>
      <exception cref="T:System.ArgumentNullException">element (parameter) cannot be null.
      -or-bounds (parameter) cannot be null.
      </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionElement.#ctor(System.Windows.UIElement,NationalInstruments.Controls.Primitives.Regions.RegionGeometry)">
      <summary>Initializes a new instance of the RegionElement class with the specified UI element and bounds.</summary>
      <param name="element">The element hosted in a region.</param>
      <param name="bounds">The bounds of the element.</param>
      <exception cref="T:System.ArgumentNullException">element (parameter) cannot be null.
      -or-bounds (parameter) cannot be null.
      </exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionElement.Element">
      <summary>Gets the element hosted in a region.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionElement.Bounds">
      <summary>Gets the bounds of the element.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionElement.DelayedInitializer">
      <summary>Gets a method used to initialize the element at the end of the initialization pass.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.FillProperty">
      <summary>
            Identifies the Fill dependency property.
            </summary>
      <returns>
            The identifier for the Fill dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeProperty">
      <summary>
            Identifies the Stroke dependency property.
            </summary>
      <returns>
            The identifier for the Stroke dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeDashArrayProperty">
      <summary>
            Identifies the StrokeDashArray dependency property.
            </summary>
      <returns>
            The identifier for the StrokeDashArray dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeDashOffsetProperty">
      <summary>
            Identifies the StrokeDashOffset dependency property.
            </summary>
      <returns>
            The identifier for the StrokeDashOffset dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeDashCapProperty">
      <summary>
            Identifies the StrokeDashCap dependency property.
            </summary>
      <returns>
            The identifier for the StrokeDashCap dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeEndLineCapProperty">
      <summary>
            Identifies the StrokeEndLineCap dependency property.
            </summary>
      <returns>
            The identifier for the StrokeEndLineCap dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeStartLineCapProperty">
      <summary>
            Identifies the StrokeStartLineCap dependency property.
            </summary>
      <returns>
            The identifier for the StrokeStartLineCap dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeLineJoinProperty">
      <summary>
            Identifies the StrokeLineJoin dependency property.
            </summary>
      <returns>
            The identifier for the StrokeLineJoin dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeMiterLimitProperty">
      <summary>
            Identifies the StrokeMiterLimit dependency property.
            </summary>
      <returns>
            The identifier for the StrokeMiterLimit dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeThicknessProperty">
      <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
      <returns>
            The identifier for the StrokeThickness dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.CornerRoundingProperty">
      <summary>
            Identifies the CornerRounding dependency property.
            </summary>
      <returns>
            The identifier for the CornerRounding dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.StrokeAlignmentProperty">
      <summary>
            Identifies the StrokeAlignment dependency property.
            </summary>
      <returns>
            The identifier for the StrokeAlignment dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.LayoutOptionsProperty">
      <summary>
            Identifies the LayoutOptions dependency property.
            </summary>
      <returns>
            The identifier for the LayoutOptions dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.RegionProperty">
      <summary>
            Identifies the Region dependency property.
            </summary>
      <returns>
            The identifier for the Region dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.PaddingProperty">
      <summary>
            Identifies the Padding dependency property.
            </summary>
      <returns>
            The identifier for the Padding dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.OpacityProperty">
      <summary>
            Identifies the Opacity dependency property.
            </summary>
      <returns>
            The identifier for the Opacity dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.OpacityMaskProperty">
      <summary>
            Identifies the OpacityMask dependency property.
            </summary>
      <returns>
            The identifier for the OpacityMask dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.VisibilityProperty">
      <summary>
            Identifies the Visibility dependency property.
            </summary>
      <returns>
            The identifier for the Visibility dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.ZIndexProperty">
      <summary>
            Identifies the ZIndex dependency property.
            </summary>
      <returns>
            The identifier for the ZIndex dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.MinWidthProperty">
      <summary>
            Identifies the MinWidth dependency property.
            </summary>
      <returns>
            The identifier for the MinWidth dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.MaxWidthProperty">
      <summary>
            Identifies the MaxWidth dependency property.
            </summary>
      <returns>
            The identifier for the MaxWidth dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.MinHeightProperty">
      <summary>
            Identifies the MinHeight dependency property.
            </summary>
      <returns>
            The identifier for the MinHeight dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.MaxHeightProperty">
      <summary>
            Identifies the MaxHeight dependency property.
            </summary>
      <returns>
            The identifier for the MaxHeight dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionShape.MarginProperty">
      <summary>
            Identifies the Margin dependency property.
            </summary>
      <returns>
            The identifier for the Margin dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionShape.OnInvalidated(NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs)">
      <summary>
            Raises the Invalidated event.
            </summary>
      <exception cref="T:System.ArgumentNullException">e (parameter) is null.
            </exception>
      <param name="e">
            An instance of RegionLayoutInvalidatedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionShape.RelativeHorizontalAlignmentValue">
      <summary>
            Gets the value to return for the RelativeHorizontalAlignment property.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionShape.RelativeVerticalAlignmentValue">
      <summary>
            Gets the value to return for the RelativeVerticalAlignment property.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionFigure.RelativeWidthProperty">
      <summary>
            Identifies the RelativeWidth dependency property.
            </summary>
      <returns>
            The identifier for the RelativeWidth dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionFigure.RelativeHeightProperty">
      <summary>
            Identifies the RelativeHeight dependency property.
            </summary>
      <returns>
            The identifier for the RelativeHeight dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionFigure.RelativeHorizontalPositionProperty">
      <summary>
            Identifies the RelativeHorizontalPosition dependency property.
            </summary>
      <returns>
            The identifier for the RelativeHorizontalPosition dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionFigure.RelativeVerticalPositionProperty">
      <summary>
            Identifies the RelativeVerticalPosition dependency property.
            </summary>
      <returns>
            The identifier for the RelativeVerticalPosition dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionFigure.RelativeHorizontalAlignmentProperty">
      <summary>
            Identifies the RelativeHorizontalAlignment dependency property.
            </summary>
      <returns>
            The identifier for the RelativeHorizontalAlignment dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionFigure.RelativeVerticalAlignmentProperty">
      <summary>
            Identifies the RelativeVerticalAlignment dependency property.
            </summary>
      <returns>
            The identifier for the RelativeVerticalAlignment dependency property.
            </returns>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs">
      <summary>
            Indicates the setting on IRegionLayoutSettingsProvider that has been invalidated.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs.#ctor(NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs.GetArgs(NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings)">
      <summary>
            Retrieves a RegionLayoutInvalidatedEventArgs instance for the specified RegionLayoutSettings.
            </summary>
      <param name="settings">The layout properties that changed.</param>
      <returns>A RegionLayoutInvalidatedEventArgs instance with the specified settings (parameter).</returns>
      <exception cref="T:System.ArgumentException">settings (parameter) is not a valid RegionLayoutSettings value.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs.ToString" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutInvalidatedEventArgs.Settings">
      <summary>Gets the layout properties that changed.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions">
      <summary>
            Defines additional options for how layout is performed on elements in a RegionPanel.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions.None">
      <summary>Indicates no additional layout options.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions.ExcludeOverhang">
      <summary>Indicates overhanging sections of an element should be excluded from the size of the parent element.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions.ConfineMeasure">
      <summary>Indicates the element should be measured with a small, fixed size.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions.IsolateInvalidation">
      <summary>
            Indicates the element and its children should perform layout locally when a region property is changed,
            rather than invalidate the whole panel.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings">
      <summary>
            Defines the settings exposed by IRegionLayoutSettingsProvider.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.Other">
      <summary>Indicates a locally-defined setting requiring a new layout pass has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.MinWidth">
      <summary>Indicates the MinWidth setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.MaxWidth">
      <summary>Indicates the MaxWidth setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.MinHeight">
      <summary>Indicates the MinHeight setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.MaxHeight">
      <summary>Indicates the MaxHeight setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.RelativeWidth">
      <summary>Indicates the RelativeWidth setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.RelativeHeight">
      <summary>Indicates the RelativeHeight setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.RelativeHorizontalPosition">
      <summary>Indicates the RelativeHorizontalPosition setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.RelativeVerticalPosition">
      <summary>Indicates the RelativeVerticalPosition setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.RelativeHorizontalAlignment">
      <summary>Indicates the RelativeHorizontalAlignment setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.RelativeVerticalAlignment">
      <summary>Indicates the RelativeVerticalAlignment setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.RelativeOrientation">
      <summary>Indicates the RelativeOrientation setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.Margin">
      <summary>Indicates the Margin setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.Padding">
      <summary>Indicates the Padding setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.OcclusionMargin">
      <summary>Indicates the OcclusionMargin setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLayoutSettings.LayoutOptions">
      <summary>Indicates the LayoutOptions setting has changed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLine.FromProperty">
      <summary>
            Identifies the From dependency property.
            </summary>
      <returns>
            The identifier for the From dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionLine.ToProperty">
      <summary>
            Identifies the To dependency property.
            </summary>
      <returns>
            The identifier for the To dependency property.
            </returns>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.UIElementHost">
      <summary>
            A RegionChild that enables UIElement objects to appear in a RegionPanel.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.#ctor">
      <summary>
            Initializes a new instance of the UIElementHost class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.#ctor(System.Windows.UIElement)">
      <summary>
            Initializes a new instance of the UIElementHost class with the specified child.
            </summary>
      <param name="child">The initial value for the Child property.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.ToString" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.RegisterParent(NationalInstruments.Controls.Primitives.Regions.RegionPanel)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.UnregisterParent(NationalInstruments.Controls.Primitives.Regions.RegionPanel)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.InitializeElements(NationalInstruments.Controls.Primitives.Regions.RegionChildLayoutInfo)" />
    <member name="F:NationalInstruments.Controls.Primitives.Regions.UIElementHost.ChildProperty">
      <summary>
            Identifies the Child dependency property.
            </summary>
      <returns>
            The identifier for the Child dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.UIElementHost.ForceInvalidateProperty">
      <summary>
            Identifies the ForceInvalidate attached property.
            </summary>
      <returns>
            The identifier for the ForceInvalidate attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.UIElementHost.HostProperty">
      <summary>
            Identifies the Host attached property.
            </summary>
      <returns>
            The identifier for the Host attached property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.GetForceInvalidate(System.Windows.UIElement)">
      <summary>
            Gets the value of the ForceInvalidate attached property for a specified UIElement.
            </summary>
      <returns>
            The ForceInvalidate property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.SetForceInvalidate(System.Windows.UIElement,System.Boolean)">
      <summary>
            Sets the value of the ForceInvalidate attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Boolean value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.GetHost(System.Windows.UIElement)">
      <summary>
            Gets the value of the Host attached property for a specified UIElement.
            </summary>
      <returns>
            The Host property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.UIElementHost.SetHost(System.Windows.UIElement,NationalInstruments.Controls.Primitives.Regions.UIElementHost)">
      <summary>
            Sets the value of the Host attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed UIElementHost value.
            </param>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.UIElementHost.ParentDefinition" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.UIElementHost.Child">
      <summary>Gets or sets the UIElement child to display in the parent region.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection">
      <summary>
            Represents a collection of region children.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.Add(NationalInstruments.Controls.Primitives.Regions.IRegionChild)">
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.AddElement(System.Windows.UIElement)">
      <summary>
            Creates a UIElementHost to host the specified element and adds it to the collection.
            </summary>
      <param name="element">The UIElement to display in the region.</param>
      <returns>The UIElementHost host created for element (parameter).</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.Clear" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.Contains(NationalInstruments.Controls.Primitives.Regions.IRegionChild)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.CopyTo(NationalInstruments.Controls.Primitives.Regions.IRegionChild[],System.Int32)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.IndexOf(NationalInstruments.Controls.Primitives.Regions.IRegionChild)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.Insert(System.Int32,NationalInstruments.Controls.Primitives.Regions.IRegionChild)">
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.Remove(NationalInstruments.Controls.Primitives.Regions.IRegionChild)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.RemoveAt(System.Int32)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IList#Add(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IList#Contains(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IList#IndexOf(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IList#Remove(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.GetEnumerator" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IEnumerable#GetEnumerator" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.Count" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.Item(System.Int32)">
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IList#IsFixedSize" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IList#IsReadOnly" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#IList#Item(System.Int32)" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#Generic#ICollection{NationalInstruments#Controls#Primitives#Regions#IRegionChild}#IsReadOnly" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#ICollection#IsSynchronized" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionChildrenCollection.System#Collections#ICollection#SyncRoot" />
    <member name="T:NationalInstruments.Controls.Primitives.Regions.EdgeLocation">
      <summary>
            Defines the different locations where an EdgeDefinition can be placed in a parent layout definition.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.EdgeLocation.Outside">
      <summary>
            The edge is placed outside of the parent layout definition.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.EdgeLocation.Inside">
      <summary>
            The edge is placed inside of the parent layout definition, overlapping the parent's area.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition">
      <summary>
            Represents an edge area inside of a RegionPanel.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.#ctor">
      <summary>
            Initializes a new instance of the EdgeDefinition class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.ToString" />
    <member name="F:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.ParentProperty">
      <summary>
            Identifies the Parent dependency property.
            </summary>
      <returns>
            The identifier for the Parent dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.FromProperty">
      <summary>
            Identifies the From dependency property.
            </summary>
      <returns>
            The identifier for the From dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.ToProperty">
      <summary>
            Identifies the To dependency property.
            </summary>
      <returns>
            The identifier for the To dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.LocationProperty">
      <summary>
            Identifies the Location dependency property.
            </summary>
      <returns>
            The identifier for the Location dependency property.
            </returns>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.RelativeWidth" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.RelativeHeight" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.RelativeHorizontalPosition" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.RelativeVerticalPosition" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.RelativeHorizontalAlignment" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.RelativeVerticalAlignment" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.Parent">
      <summary>Gets or sets the name of the parent layout definition.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.From">
      <summary>Gets or sets the relative start point of the edge within the parent layout definition.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.To">
      <summary>Gets or sets the relative end point of the edge within the parent layout definition.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.EdgeDefinition.Location">
      <summary>Gets or sets the location of the edge definition in the parent layout definition.</summary>
      <exception cref="T:System.ArgumentException">value (parameter) is not a valid value for EdgeLocation.</exception>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection">
      <summary>
            Represents a collection of named layout definitions.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.Add(NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition)">
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The RegionLayoutDefinition is already the child of a RegionLayoutDefinitionCollection.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.Clear" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.Contains(NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.CopyTo(NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition[],System.Int32)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.IndexOf(NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.Insert(System.Int32,NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition)">
      <exception cref="T:System.ArgumentNullException">item (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.Remove(NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinition)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.RemoveAt(System.Int32)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.GetEnumerator" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IEnumerable#GetEnumerator" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IList#Add(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IList#Contains(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IList#IndexOf(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IList#Remove(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.Count" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.Item(System.Int32)">
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IList#IsFixedSize" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IList#IsReadOnly" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#IList#Item(System.Int32)" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#Generic#ICollection{NationalInstruments#Controls#Primitives#Regions#RegionLayoutDefinition}#IsReadOnly" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#ICollection#IsSynchronized" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionLayoutDefinitionCollection.System#Collections#ICollection#SyncRoot" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RadialLayout.CreateInstanceCore" />
    <member name="T:NationalInstruments.Controls.Primitives.Regions.RegionPanel">
      <summary>
            Defines an area within which you can position child elements by using relative position and size parameters
            that are relative to the geometric layout defined on the RegionPanel.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.ToString" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.InvalidateRootMeasure">
      <summary>
            Forces a measure call on the root parent of this RegionPanel.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRootPanel">
      <summary>
            Finds the root RegionPanel.
            </summary>
      <returns>The root RegionPanel</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SuppressNextLayoutPass">
      <summary>
            Causes the next measure and arrange pass to return the current calculated size,
            skipping layout on child elements.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.MeasureOverride(System.Windows.Size)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.ArrangeOverride(System.Windows.Size)" />
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.OnMeasure">
      <summary>
            Performs any processing necessary when Measure() has been called.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.LayoutProperty">
      <summary>
            Identifies the Layout dependency property.
            </summary>
      <returns>
            The identifier for the Layout dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.DefaultSizeProperty">
      <summary>
            Identifies the DefaultSize dependency property.
            </summary>
      <returns>
            The identifier for the DefaultSize dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.FillAvailableSizeProperty">
      <summary>
            Identifies the FillAvailableSize dependency property.
            </summary>
      <returns>
            The identifier for the FillAvailableSize dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RegionProperty">
      <summary>
            Identifies the Region attached property.
            </summary>
      <returns>
            The identifier for the Region attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RelativeWidthProperty">
      <summary>
            Identifies the RelativeWidth attached property.
            </summary>
      <returns>
            The identifier for the RelativeWidth attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RelativeHeightProperty">
      <summary>
            Identifies the RelativeHeight attached property.
            </summary>
      <returns>
            The identifier for the RelativeHeight attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RelativeHorizontalPositionProperty">
      <summary>
            Identifies the RelativeHorizontalPosition attached property.
            </summary>
      <returns>
            The identifier for the RelativeHorizontalPosition attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RelativeVerticalPositionProperty">
      <summary>
            Identifies the RelativeVerticalPosition attached property.
            </summary>
      <returns>
            The identifier for the RelativeVerticalPosition attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RelativeHorizontalAlignmentProperty">
      <summary>
            Identifies the RelativeHorizontalAlignment attached property.
            </summary>
      <returns>
            The identifier for the RelativeHorizontalAlignment attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RelativeVerticalAlignmentProperty">
      <summary>
            Identifies the RelativeVerticalAlignment attached property.
            </summary>
      <returns>
            The identifier for the RelativeVerticalAlignment attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RelativeOrientationProperty">
      <summary>
            Identifies the RelativeOrientation attached property.
            </summary>
      <returns>
            The identifier for the RelativeOrientation attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.PaddingProperty">
      <summary>
            Identifies the Padding attached property.
            </summary>
      <returns>
            The identifier for the Padding attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.OcclusionMarginProperty">
      <summary>
            Identifies the OcclusionMargin attached property.
            </summary>
      <returns>
            The identifier for the OcclusionMargin attached property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Regions.RegionPanel.LayoutOptionsProperty">
      <summary>
            Identifies the LayoutOptions attached property.
            </summary>
      <returns>
            The identifier for the LayoutOptions attached property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.#ctor">
      <summary>
            Initializes a new instance of the RegionPanel class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRegion(System.Windows.UIElement)">
      <summary>
            Gets the value of the Region attached property for a specified UIElement.
            </summary>
      <returns>
            The Region property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetRegion(System.Windows.UIElement,System.String)">
      <summary>
            Sets the value of the Region attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed String value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRelativeWidth(System.Windows.UIElement)">
      <summary>
            Gets the value of the RelativeWidth attached property for a specified UIElement.
            </summary>
      <returns>
            The RelativeWidth property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetRelativeWidth(System.Windows.UIElement,System.Double)">
      <summary>
            Sets the value of the RelativeWidth attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Double value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRelativeHeight(System.Windows.UIElement)">
      <summary>
            Gets the value of the RelativeHeight attached property for a specified UIElement.
            </summary>
      <returns>
            The RelativeHeight property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetRelativeHeight(System.Windows.UIElement,System.Double)">
      <summary>
            Sets the value of the RelativeHeight attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Double value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRelativeHorizontalPosition(System.Windows.UIElement)">
      <summary>
            Gets the value of the RelativeHorizontalPosition attached property for a specified UIElement.
            </summary>
      <returns>
            The RelativeHorizontalPosition property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetRelativeHorizontalPosition(System.Windows.UIElement,System.Double)">
      <summary>
            Sets the value of the RelativeHorizontalPosition attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Double value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRelativeVerticalPosition(System.Windows.UIElement)">
      <summary>
            Gets the value of the RelativeVerticalPosition attached property for a specified UIElement.
            </summary>
      <returns>
            The RelativeVerticalPosition property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetRelativeVerticalPosition(System.Windows.UIElement,System.Double)">
      <summary>
            Sets the value of the RelativeVerticalPosition attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Double value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRelativeHorizontalAlignment(System.Windows.UIElement)">
      <summary>
            Gets the value of the RelativeHorizontalAlignment attached property for a specified UIElement.
            </summary>
      <returns>
            The RelativeHorizontalAlignment property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetRelativeHorizontalAlignment(System.Windows.UIElement,NationalInstruments.Controls.RelativeAlignment)">
      <summary>
            Sets the value of the RelativeHorizontalAlignment attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed RelativeAlignment value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRelativeVerticalAlignment(System.Windows.UIElement)">
      <summary>
            Gets the value of the RelativeVerticalAlignment attached property for a specified UIElement.
            </summary>
      <returns>
            The RelativeVerticalAlignment property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetRelativeVerticalAlignment(System.Windows.UIElement,NationalInstruments.Controls.RelativeAlignment)">
      <summary>
            Sets the value of the RelativeVerticalAlignment attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed RelativeAlignment value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetRelativeOrientation(System.Windows.UIElement)">
      <summary>
            Gets the value of the RelativeOrientation attached property for a specified UIElement.
            </summary>
      <returns>
            The RelativeOrientation property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetRelativeOrientation(System.Windows.UIElement,NationalInstruments.Controls.RelativeOrientation)">
      <summary>
            Sets the value of the RelativeOrientation attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed RelativeOrientation value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetPadding(System.Windows.UIElement)">
      <summary>
            Gets the value of the Padding attached property for a specified UIElement.
            </summary>
      <returns>
            The Padding property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetPadding(System.Windows.UIElement,System.Windows.Thickness)">
      <summary>
            Sets the value of the Padding attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Thickness value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetOcclusionMargin(System.Windows.UIElement)">
      <summary>
            Gets the value of the OcclusionMargin attached property for a specified UIElement.
            </summary>
      <returns>
            The OcclusionMargin property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetOcclusionMargin(System.Windows.UIElement,System.Windows.Thickness)">
      <summary>
            Sets the value of the OcclusionMargin attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Thickness value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.GetLayoutOptions(System.Windows.UIElement)">
      <summary>
            Gets the value of the LayoutOptions attached property for a specified UIElement.
            </summary>
      <returns>
            The LayoutOptions property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SetLayoutOptions(System.Windows.UIElement,NationalInstruments.Controls.Primitives.Regions.RegionLayoutOptions)">
      <summary>
            Sets the value of the LayoutOptions attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed RegionLayoutOptions value.
            </param>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.Padding">
      <summary>Gets or sets the spacing within the panel.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.SuppressingLayout">
      <summary>
            Gets a value indicating whether SuppressNextLayoutPass has been called
            to suppress the next layout pass.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.LogicalChildren" />
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.LayoutDefinitions">
      <summary>Gets the collection of layout objects that define how the region's area is used.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.RegionChildren">
      <summary>Gets the collection of child objects to display in the region.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.Layout">
      <summary>Gets or sets the strategy used to layout children in the region.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.DefaultSize">
      <summary>Gets or sets the default size of the region, if no parent size constraints are provided during layout.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.FillAvailableSize">
      <summary>Gets or sets a value indicating whether the region should grow to fill all the available space.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Regions.RegionPanel.Ops">
      <summary>
            Gets the layout operations for the panel.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs">
      <summary>
            Provides data for the CollectionChanging event.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs.#ctor(System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>
            Initializes a new instance of the NotifyCollectionChangingEventArgs class.
            </summary>
      <param name="newItems">The list of items added to the collection, or null if no items were added.</param>
      <param name="oldItems">The list of items removed from the collection, or null if no items were removed.</param>
      <param name="startingIndex">The index where the change occurred.</param>
      <exception cref="T:System.ArgumentException">
              Both newItems (parameter) and oldItems (parameter) are null or empty.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startingIndex (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs.Create(System.Collections.IList,System.Collections.IList,System.Int32,System.Func{System.Action}@)">
      <summary>
            Creates a new instance of the NotifyCollectionChangingEventArgs class,
            providing a method to access the change complete callbacks registered with the args.
            </summary>
      <param name="newItems">The list of items added to the collection, or null if no items were added.</param>
      <param name="oldItems">The list of items removed from the collection, or null if no items were removed.</param>
      <param name="startingIndex">The index where the change occurred.</param>
      <param name="retrieveChangeCompleteCallbacks">
            When this method returns, contains a method to retrieve the change complete callbacks registered with the args.
            </param>
      <returns>A new instance of the NotifyCollectionChangingEventArgs class.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs.AddChangeCompleteCallback(System.Action)">
      <summary>
            Adds a callback to invoke after the collection change has completed.
            </summary>
      <param name="callback">A change completion callback.</param>
      <exception cref="T:System.ArgumentNullException">callback (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs.AddChangeCompleteCallback(System.Action,System.Boolean)">
      <summary>
            Adds a callback to invoke after the collection change has completed.
            </summary>
      <param name="callback">A change completion callback.</param>
      <param name="lowPriority">A value indicating whether the callback should occur after other callbacks.</param>
      <exception cref="T:System.ArgumentNullException">callback (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs.ToString" />
    <member name="P:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs.NewItems">
      <summary>Gets the list of items added to the collection.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs.OldItems">
      <summary>Gets the list of items removed from the collection.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.NotifyCollectionChangingEventArgs.StartingIndex">
      <summary>Gets the index where the change occurred.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.Scale">
      <summary>
            Base class for all scales.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.IScale">
      <summary>
            Represents a scale in a control.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.IScale.GetDataMapper(System.Object)">
      <summary>
            Gets a data mapper for the scale based on the specified context.
            </summary>
      <param name="context">An object containing context information about the parent control.</param>
      <returns>An IDataMapper that can be used for mapping data values.</returns>
      <exception cref="T:System.ArgumentNullException">context (parameter) is null.</exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.IScale.IsVisible(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Determines whether the scale should display in the given scale presenter.
            </summary>
      <param name="presenter">A ScalePresenter where the scale should be displayed.</param>
      <returns>true if Present should be called; otherwise, false if Clean should be called.</returns>
      <exception cref="T:System.ArgumentNullException">presenter (parameter) is null.</exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.IScale.Present(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Updates the visual representation of the scale in the specified presenter.
            </summary>
      <param name="presenter">A ScalePresenter where the scale should be displayed.</param>
      <exception cref="T:System.ArgumentNullException">presenter (parameter) is null.</exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.IScale.Clean(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Clears the visual representation of the scale from the specified presenter.
            </summary>
      <param name="presenter">A ScalePresenter where the scale was displayed.</param>
      <exception cref="T:System.ArgumentNullException">presenter (parameter) is null.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IScale.Label">
      <summary>
            Gets or sets a label to describe the scale.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IScale.LabelTemplate">
      <summary>
            Gets or sets the data template used to display the scale label.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.IScale.Visibility">
      <summary>
            Gets or sets a value indicating whether the scale is shown.
            </summary>
    </member>
    <member name="E:NationalInstruments.Controls.Primitives.IScale.Invalidated">
      <summary>
            Occurs when the appearance or data configuration of the scale has changed.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Scale.VisibilityProperty">
      <summary>
            Identifies the Visibility dependency property.
            </summary>
      <returns>
            The identifier for the Visibility dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Scale.LabelProperty">
      <summary>
            Identifies the Label dependency property.
            </summary>
      <returns>
            The identifier for the Label dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Scale.LabelTemplateProperty">
      <summary>
            Identifies the LabelTemplate dependency property.
            </summary>
      <returns>
            The identifier for the LabelTemplate dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Scale.LabelOrientationProperty">
      <summary>
            Identifies the LabelOrientation dependency property.
            </summary>
      <returns>
            The identifier for the LabelOrientation dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Scale.LabelVisibilityProperty">
      <summary>
            Identifies the LabelVisibility dependency property.
            </summary>
      <returns>
            The identifier for the LabelVisibility dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Scale.BaselineStrokeProperty">
      <summary>
            Identifies the BaselineStroke dependency property.
            </summary>
      <returns>
            The identifier for the BaselineStroke dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Scale.BaselineStrokeThicknessProperty">
      <summary>
            Identifies the BaselineStrokeThickness dependency property.
            </summary>
      <returns>
            The identifier for the BaselineStrokeThickness dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.Scale.PresentVisualsProperty">
      <summary>
            Identifies the PresentVisuals attached property.
            </summary>
      <returns>
            The identifier for the PresentVisuals attached property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Scale.OnInvalidated(System.EventArgs)">
      <summary>
            Raises the Invalidated event.
            </summary>
      <exception cref="T:System.ArgumentNullException">e (parameter) is null.
            </exception>
      <param name="e">
            An instance of EventArgs that contains the event data.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Scale.GetPresentVisuals(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Gets the value of the PresentVisuals attached property for a specified UIElement.
            </summary>
      <returns>
            The PresentVisuals property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Scale.SetPresentVisuals(NationalInstruments.Controls.Primitives.ScalePresenter,System.Tuple{NationalInstruments.Controls.Primitives.Regions.EdgeDefinition,NationalInstruments.Controls.Primitives.Regions.UIElementHost,NationalInstruments.Controls.Primitives.Regions.RegionLine})">
      <summary>
            Sets the value of the PresentVisuals attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Tuple&lt;T1,T2,T3&gt; value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Scale.GetDataMapper(System.Object)" />
    <member name="M:NationalInstruments.Controls.Primitives.Scale.IsVisible(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>Implements the IsVisible method.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Scale.Present(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>Implements the Present method.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.Scale.Clean(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>Implements the Clean method.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Scale.Visibility">
      <summary>Gets or sets the visibility of the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Scale.Label">
      <summary>Gets or sets a label to describe the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Scale.LabelTemplate">
      <summary>Gets or sets the data template used to display the scale label.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Scale.LabelOrientation">
      <summary>Gets or sets the relative orientation of the label.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Scale.LabelVisibility">
      <summary>Gets or sets a value indicating whether the scale label is shown.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Scale.BaselineStroke">
      <summary>Gets or sets the Brush used to draw the scale baseline.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.Scale.BaselineStrokeThickness">
      <summary>Gets or sets the size of the scale baseline.</summary>
    </member>
    <member name="E:NationalInstruments.Controls.Primitives.Scale.Invalidated">
      <summary>Occurs when the scale needs to be presented again.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.ScalePresenter">
      <summary>Hosts the visual representation for a scale.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ScalePresenter.ScaleLabel">
      <summary>Gets the conventional edge location in a scale presenter where the scale label is displayed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ScalePresenter.MajorLabels">
      <summary>Gets the conventional edge location in a scale presenter where major labels are displayed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ScalePresenter.MajorTicks">
      <summary>Gets the conventional edge location in a scale presenter where major ticks are displayed.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ScalePresenter.MinorTicks">
      <summary>Gets the conventional edge location in a scale presenter where minor ticks are displayed.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ScalePresenter.#ctor">
      <summary>
            Initializes a new instance of the ScalePresenter class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ScalePresenter.OnMeasure" />
    <member name="F:NationalInstruments.Controls.Primitives.ScalePresenter.ScaleProperty">
      <summary>
            Identifies the Scale dependency property.
            </summary>
      <returns>
            The identifier for the Scale dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.ScalePresenter.OwnerProperty">
      <summary>
            Identifies the Owner dependency property.
            </summary>
      <returns>
            The identifier for the Owner dependency property.
            </returns>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ScalePresenter.Scale">
      <summary>Gets or sets the scale to visualize.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ScalePresenter.Owner">
      <summary>Gets or sets the visual owner of the presenter.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ScalePresenter.ScaleInvalidatedListener">
      <summary>
            Gets or sets a weak event listener for the IScale.Invalidated event.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.ValueFormatterCollection">
      <summary>
            Represents a collection of value formatters.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValueFormatterCollection.#ctor">
      <summary>
            Initializes a new instance of the ValueFormatterCollection class.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.ValuePresenterArgs">
      <summary>
            Provides data for Visualize method calls.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValuePresenterArgs.#ctor(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the ValuePresenterArgs class with the specified culture.
            </summary>
      <param name="context">The context of the ValuePresenterArgs. Often the parent control.</param>
      <param name="culture">The culture to use.</param>
      <exception cref="T:System.ArgumentNullException">culture (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.ValuePresenterArgs.#ctor(System.Object,System.Globalization.CultureInfo,System.Windows.Media.Brush)">
      <summary>
            Initializes a new instance of the ValuePresenterArgs class with the specified values.
            </summary>
      <param name="context">The context of the ValuePresenterArgs. Often the parent control.</param>
      <param name="culture">The culture to use.</param>
      <param name="foreground">The foreground of the parent control.</param>
      <exception cref="T:System.ArgumentNullException">culture (parameter) is null.
            </exception>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValuePresenterArgs.Context">
      <summary>
            Gets the context from the parent control, or null if none was provided.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValuePresenterArgs.Culture">
      <summary>
            Gets the culture the ValuePresenter should use.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.ValuePresenterArgs.Foreground">
      <summary>
            Gets the foreground brush from the parent control, or null if none was provided.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.SingleValuePresenter">
      <summary>
            Displays a single value via a ValuePresenter.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.SingleValuePresenter.ValuePresenterProperty">
      <summary>
            Identifies the ValuePresenter dependency property.
            </summary>
      <returns>
            The identifier for the ValuePresenter dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.SingleValuePresenter.ValueProperty">
      <summary>
            Identifies the Value dependency property.
            </summary>
      <returns>
            The identifier for the Value dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.SingleValuePresenter.HorizontalContentAlignmentProperty">
      <summary>
            Identifies the HorizontalContentAlignment dependency property.
            </summary>
      <returns>
            The identifier for the HorizontalContentAlignment dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.SingleValuePresenter.VerticalContentAlignmentProperty">
      <summary>
            Identifies the VerticalContentAlignment dependency property.
            </summary>
      <returns>
            The identifier for the VerticalContentAlignment dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.SingleValuePresenter.#ctor">
      <summary>
            Initializes a new instance of the SingleValuePresenter class.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.SingleValuePresenter.ValuePresenter">
      <summary>Gets or sets the presenter used to display Value.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.SingleValuePresenter.Value">
      <summary>Gets or sets the value to present.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.SingleValuePresenter.HorizontalContentAlignment" />
    <member name="P:NationalInstruments.Controls.Primitives.SingleValuePresenter.VerticalContentAlignment" />
    <member name="T:NationalInstruments.Controls.TemplateValuePresenter">
      <summary>
            Provides a DataTemplate to display a value.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.TemplateValuePresenter.TemplateProperty">
      <summary>
            Identifies the Template dependency property.
            </summary>
      <returns>
            The identifier for the Template dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.TemplateValuePresenter.CreateInstanceCore" />
    <member name="M:NationalInstruments.Controls.TemplateValuePresenter.#ctor">
      <summary>
            Initializes a new instance of the TemplateValuePresenter class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.TemplateValuePresenter.#ctor(System.Windows.DataTemplate)">
      <summary>
            Initializes a new instance of the TemplateValuePresenter class with the specified template.
            </summary>
      <param name="template">
            The specified template.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.TemplateValuePresenter.VisualizeCore``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs,System.Windows.UIElement)" />
    <member name="P:NationalInstruments.Controls.TemplateValuePresenter.Template">
      <summary>Gets or sets the data template used to display a data value.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.TickShape">
      <summary>
            Represents a basic enumeration that provides a PathFigure describing a shape that is either filled or hollow.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.TickShape.DrawShape(System.Windows.Media.StreamGeometryContext,System.Windows.Rect)">
      <summary>
            Draws the shape in vector mode at the offset and size specified by the bounding box.
            </summary>
      <param name="context">The StreamGeometryContext.</param>
      <param name="boundingBox">The offset and size of the given figure.</param>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.Diamond">
      <summary>Gets a filled diamond shape.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.DiamondOutline">
      <summary>Gets an outline of a diamond shape.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.Ellipse">
      <summary>Gets a filled ellipse shape.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.EllipseOutline">
      <summary>Gets an outline of an ellipse shape.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.InwardTriangle">
      <summary>Gets a filled triangle shape pointing upwards.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.InwardTriangleOutline">
      <summary>Gets an outline of a triangle shape pointing upwards.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.OutwardTriangle">
      <summary>Gets a filled triangle shape pointing downwards.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.OutwardTriangleOutline">
      <summary>Gets an outline of a triangle shape pointing downwards.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.Rectangle">
      <summary>Gets a filled rectangle shape.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.RectangleOutline">
      <summary>Gets an outline of a rectangular shape.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.IsFilled">
      <summary>
            Gets a value indicating whether a particular shape is filled.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.TickShape.UnderlyingType" />
    <member name="T:NationalInstruments.Controls.RelativeLocation">
      <summary>
            Defines the different locations a child part can have.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.RelativeLocation.None">
      <summary>
            The child control should not appear in the visual tree.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.RelativeLocation.Near">
      <summary>
            The child control appears on the near side of the parent control, as defined by the parent.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.RelativeLocation.Far">
      <summary>
            The child control appears on the far side of the parent control, as defined by the parent.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.RelativeLocation.NearAndFar">
      <summary>
            The child control appears on both the near and far sides of the parent control, as defined by the parent.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.RelativeOrientation">
      <summary>
            Represents an orientation that is relative to a baseline orientation.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.RelativeOrientation.CreateOffset(System.Double)">
      <summary>Provides a value indicating offset orientation behavior.</summary>
      <param name="offsetAngle">The angle to maintain with respect to the tangent of the orbit around the target.</param>
      <returns>A value indicating the offset behavior for the given angle.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.RelativeOrientation.GetRotationAngle(System.Double)">
      <summary>
            Provides the angle to which the object is oriented.
            </summary>
      <param name="baseAngle">The angle required to rotate from the standard orientation to get to the position on the target.</param>
      <returns>The angle to which the object is oriented.</returns>
    </member>
    <member name="P:NationalInstruments.Controls.RelativeOrientation.None">
      <summary>Gets a value indicating that no orientation is applied to the target.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RelativeOrientation.Natural">
      <summary>Gets a value indicating the natural orientation behavior for Cartesian layout.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RelativeOrientation.Perpendicular">
      <summary>Gets a value indicating perpendicular orientation behavior.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RelativeOrientation.UnderlyingType" />
    <member name="T:NationalInstruments.Controls.Data.BufferCollection`1">
      <summary>
            Represents a read-only collection of buffers.
            </summary>
      <typeparam name="TData">The data type of the buffers.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Data.BufferCollection`1.#ctor(NationalInstruments.DataInfrastructure.Buffer{`0}[])">
      <summary>
            Initializes a new instance of the BufferCollection&lt;T&gt; class.
            </summary>
      <param name="data">The data buffers the collection will contain.</param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">data (parameter) contains a null buffer.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.BufferCollection`1.#ctor(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Buffer{`0}})">
      <summary>
            Initializes a new instance of the BufferCollection&lt;T&gt;
            class.
            </summary>
      <param name="data">
            The data buffers the collection will contain.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">data (parameter) contains a null buffer.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.BufferCollection`1.Dispose" />
    <member name="M:NationalInstruments.Controls.Data.BufferCollection`1.Dispose(System.Boolean)">
      <param name="disposing">A value indicating whether the method is called from Dispose.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Data.BufferCollection`1.ToString" />
    <member name="M:NationalInstruments.Controls.Data.BufferCollection`1.GetEnumerator" />
    <member name="P:NationalInstruments.Controls.Data.BufferCollection`1.Count">
      <summary>
            Gets the number of buffers in the collection.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Data.BufferCollection`1.Item(System.Int32)">
      <summary>
            Gets the buffer at the specified index.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Data.DataMapperChangedEventArgs">
      <summary>
            Provides data for the DataMapperChanged event.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.DataMapperChangedEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the DataMapperChangedEventArgs class with the specified source.
            </summary>
      <param name="source">The source of the event.</param>
      <exception cref="T:System.ArgumentNullException">source (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">source (parameter) is empty.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.DataMapperChangedEventArgs.ToString" />
    <member name="P:NationalInstruments.Controls.Data.DataMapperChangedEventArgs.Source">
      <summary>
            Gets the source of the event.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Data.IRangeDataMapper`1">
      <summary>
            Represents a strongly-typed data mapper that uses a Range&lt;T&gt; to map numeric data values.
            </summary>
      <typeparam name="TData">The data type of the data mapper.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IRangeDataMapper`1.CanAcceptRange(NationalInstruments.Controls.Range{`0})">
      <summary>
            Determines whether the specified range can be assigned to Range.
            </summary>
      <param name="range">The Range&lt;T&gt; to validate.</param>
      <returns>true if range (parameter) is valid; otherwise, false.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IRangeDataMapper`1.CoerceRange(NationalInstruments.Controls.Range{`0})">
      <summary>
            Returns a coerced range based on the given range that can be assigned to Range.
            </summary>
      <param name="range">The Range&lt;T&gt; to coerce.</param>
      <returns>A Range&lt;T&gt; based on range (parameter) that can be assigned to 
            IRangeDataMapper&lt;T&gt;.</returns>
    </member>
    <member name="P:NationalInstruments.Controls.Data.IRangeDataMapper`1.Range">
      <summary>
            Gets or sets the range used to map raw data values.
            </summary>
      <exception cref="T:System.ArgumentException">CanAcceptRange returns false for value (parameter).
            </exception>
    </member>
    <member name="P:NationalInstruments.Controls.Data.IRangeDataMapper`1.IsInverted">
      <summary>
            Gets or sets a value indicating whether the range is inverted.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Data.IRangeDataMapper`1.RangeAdjuster">
      <summary>
            Gets or sets the adjuster used to update the Range for new data.
            </summary>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.Controls.Data.IRangeDataMapperCalculator`1">
      <summary>
            Represents an object to perform scaling calculations for a specific range.
            </summary>
      <typeparam name="TData">The data type of the result of data mapping.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IRangeDataMapperCalculator`1.Map(`0)">
      <summary>
            Implements the Map method.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IRangeDataMapperCalculator`1.TryInverseMap(System.Double,`0@)">
      <summary>
            Implements the TryInverseMap method.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.IRangeDataMapperCalculator`1.ShiftByDifference(`0,`0,`0)">
      <summary>
            Shifts value (parameter) by the difference between the specified original and shifted baseline values.
            </summary>
      <param name="value">The value to shift.</param>
      <param name="originalValue">The original baseline value.</param>
      <param name="shiftedOriginalValue">The originalValue (parameter) shifted by the target amount.</param>
      <returns>The value (parameter) shifted by the difference between the originalValue (parameter) and the shiftedOriginalValue (parameter).</returns>
    </member>
    <member name="P:NationalInstruments.Controls.Data.IRangeDataMapperCalculator`1.Range" />
    <member name="P:NationalInstruments.Controls.Data.IRangeDataMapperCalculator`1.IsInverted" />
    <member name="T:NationalInstruments.Controls.Data.LinearRangeDataMapper`3">
      <summary>
            Represents a data mapper for linear data.
            </summary>
      <typeparam name="TData">The data type of the data mapper.</typeparam>
      <typeparam name="THelper">The corresponding mathematical type for the TData (generic type parameter) data type.</typeparam>
      <typeparam name="TOperations">The descriptor type to use when performing operations on TData (generic type parameter) values.</typeparam>
    </member>
    <member name="T:NationalInstruments.Controls.Data.RangeDataMapper`2">
      <summary>
            Provides a common base class implementation for IRangeDataMapper&lt;T&gt;.
            </summary>
      <typeparam name="TData">The data type of the data mapper.</typeparam>
      <typeparam name="TOperations">The descriptor type to use when performing operations on TData (generic type parameter) values.</typeparam>
    </member>
    <member name="F:NationalInstruments.Controls.Data.RangeDataMapper`2.Ops">
      <summary>
            Gets the TOperations (generic type parameter) descriptor used to perform mathematical operations on raw TData (generic type parameter) values.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.Transform(System.Double,System.Double)" />
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.Contains(`0)" />
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.CanAcceptRange(NationalInstruments.Controls.Range{`0})" />
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.CanAcceptRangeCore(NationalInstruments.Controls.Range{`0})">
      <summary>
            Implements the CanAcceptRange method.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.CoerceRange(NationalInstruments.Controls.Range{`0})" />
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.GetValidRange(NationalInstruments.Controls.Range{`0})">
      <summary>
            Returns a valid range for the data mapper.
            </summary>
      <param name="range">An existing invalid range that the new range can be based on.</param>
      <returns>A valid range for the data mapper.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.AdjustRange(NationalInstruments.Controls.Data.BufferCollection{`0})" />
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.Map(`0)">
      <param name="value">A raw data value.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.Map(NationalInstruments.DataInfrastructure.Buffer{`0})" />
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.TryInverseMap(System.Double,`0@)" />
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.InverseMap(NationalInstruments.DataInfrastructure.Buffer{System.Double},NationalInstruments.DataInfrastructure.Unit)" />
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.GetMapperCalculator">
      <summary>
            Retrieves an IRangeDataMapperCalculator&lt;T&gt; implementation used to perform mapping calculations
            using the values of Range and IsInverted
             on the mapper.
            </summary>
      <returns>
            An IRangeDataMapperCalculator&lt;T&gt; implementation for the current mapper state.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.GetMapperCalculator(NationalInstruments.Controls.Range{`0},System.Boolean)">
      <summary>
            Retrieves an IRangeDataMapperCalculator&lt;T&gt; implementation used to perform mapping calculations on the specified range values.
            </summary>
      <param name="range">The value of the range.</param>
      <param name="isInverted">A value indicating whether the range is inverted.</param>
      <returns>
            An IRangeDataMapperCalculator&lt;T&gt; implementation for the specified mapper state.
            </returns>
      <exception cref="T:System.ArgumentException">CanAcceptRange returns false for range (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.CreateMapperCalculator(NationalInstruments.Controls.Range{`0},System.Boolean)">
      <summary>Creates a new IRangeDataMapperCalculator&lt;T&gt; for the specified range values.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.TryMapInterval(System.Object,System.Double@)">
      <summary>
            Tries to map the declared interval for a buffer to a relative value.
            </summary>
      <param name="interval">The interval for the buffer.</param>
      <param name="relativeInterval">When this method returns true, contains the relative value corresponding to the buffer interval.</param>
      <returns>true if interval (parameter) could be mapped to relativeInterval (parameter); otherwise, false.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.OnIsInvertedChanged">
      <summary>Called when the value of IsInverted has changed.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.OnRangeChanged">
      <summary>Called when the value of Range has changed.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.#ctor">
      <summary>
            Initializes a new instance of the RangeDataMapper&lt;T1,T2&gt; class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RangeDataMapper`2.OnDataMapperChanged(NationalInstruments.Controls.Data.DataMapperChangedEventArgs)">
      <summary>
            Raises the DataMapperChanged event.
            </summary>
      <exception cref="T:System.ArgumentNullException">e (parameter) is null.
            </exception>
      <param name="e">
            An instance of DataMapperChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.Controls.Data.RangeDataMapper`2.DataType" />
    <member name="P:NationalInstruments.Controls.Data.RangeDataMapper`2.Descriptor" />
    <member name="P:NationalInstruments.Controls.Data.RangeDataMapper`2.IsInverted" />
    <member name="P:NationalInstruments.Controls.Data.RangeDataMapper`2.RangeAdjuster">
      <exception cref="T:System.ArgumentNullException">value (parameter) cannot be null.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.Data.RangeDataMapper`2.Range">
      <exception cref="T:System.ArgumentException">CanAcceptRange
 returns false for Range.</exception>
    </member>
    <member name="E:NationalInstruments.Controls.Data.RangeDataMapper`2.DataMapperChanged" />
    <member name="M:NationalInstruments.Controls.Data.LinearRangeDataMapper`3.ToString" />
    <member name="M:NationalInstruments.Controls.Data.LinearRangeDataMapper`3.CreateMapperCalculator(NationalInstruments.Controls.Range{`0},System.Boolean)" />
    <member name="M:NationalInstruments.Controls.Data.LinearRangeDataMapper`3.TryMapInterval(System.Object,System.Double@)" />
    <member name="T:NationalInstruments.Controls.Data.LinearRangeDataMapper`3.LinearCalculator">
      <summary>
            Performs linear interpolation on a value in a given range.
            
            For example, given a raw data value starting at Range.Minimum and moving towards Range.Maximum,
            the corresponding relative value will move linearly from 0.0 to 1.0. If the range is inverted,
            the relative value will move linearly from 1.0 to 0.0 instead.
            

</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Data.LinearRangeDataMapper`3.LinearOverflowCalculator">
      <summary>
            Like LinearCalculator, performs linear interpolation on a value in a given range,
            with special consideration to the size limits of the underlying data type.
            
            For example, if TData (generic type parameter) is SByte, then trying to calculate the interval between
            MinValue (-128) and MaxValue (127) would require more space than can fit in a SByte.
            


            Instead, we divide the range into two ranges, such as [-128,0) and [0,127], which can be calculated without overflow.
            Then we use the appropriate calculator based on where the input value falls, adjusting the calculated relative value
            to match the proportion of the original range that it covers.
            

</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5">
      <summary>
            Represents a logarithmic data mapper.
            </summary>
      <typeparam name="TData">The data type of the data mapper.</typeparam>
      <typeparam name="TOperations">The descriptor type to use when performing operations on TData (generic type parameter) values.</typeparam>
      <typeparam name="TLog">The corresponding logarithm type for the TData (generic type parameter) data type.</typeparam>
      <typeparam name="TLogHelper">The corresponding mathematical type for the TLog (generic type parameter) data type.</typeparam>
      <typeparam name="TLogOperations">The descriptor type to use when performing operations on TLog (generic type parameter) values.</typeparam>
    </member>
    <member name="T:NationalInstruments.Controls.Data.ILogarithmicRangeDataMapper`2">
      <summary>
            Represents a strongly-typed data mapper that uses a Range&lt;T&gt; to map raw data values.
            </summary>
      <typeparam name="TData">The data type of the data mapper.</typeparam>
      <typeparam name="TLog">The corresponding logarithm type for the TData (generic type parameter) data type.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Data.ILogarithmicRangeDataMapper`2.CanAcceptLogarithmBase(`1)">
      <summary>
            Determines whether the specified logarithm base can be assigned to LogarithmBase.
            </summary>
      <param name="logarithmBase">The logarithm base to validate.</param>
      <returns>true if logarithmBase (parameter) is valid; otherwise, false.</returns>
    </member>
    <member name="P:NationalInstruments.Controls.Data.ILogarithmicRangeDataMapper`2.LogarithmBase">
      <summary>
            Gets or sets the base of the logarithm used for the data mapper.
            </summary>
      <exception cref="T:System.ArgumentException">CanAcceptLogarithmBase
             returns false for value (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.ToString" />
    <member name="M:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.CanAcceptLogarithmBase(`2)" />
    <member name="M:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.CanAcceptRangeCore(NationalInstruments.Controls.Range{`0})" />
    <member name="M:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.GetValidRange(NationalInstruments.Controls.Range{`0})" />
    <member name="M:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.GetMapperCalculator(NationalInstruments.Controls.Range{`0},System.Boolean,`2)">
      <summary>
            Retrieves an IRangeDataMapperCalculator&lt;T&gt; implementation used to perform mapping calculations on the specified range values.
            </summary>
      <param name="range">The value of the range.</param>
      <param name="isInverted">A value indicating whether the range is inverted.</param>
      <param name="logarithmBase">The value of the logarithm base.</param>
      <returns>
            An IRangeDataMapperCalculator&lt;T&gt; implementation for the specified mapper state.
            </returns>
      <exception cref="T:System.ArgumentException">CanAcceptRange returns false for range (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.CreateMapperCalculator(NationalInstruments.Controls.Range{`0},System.Boolean)" />
    <member name="M:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.TryMapInterval(System.Object,System.Double@)" />
    <member name="M:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.#ctor">
      <summary>
            Initializes a new instance of the LogarithmicRangeDataMapper&lt;T1,T2,T3,T4,T5&gt; class.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.LogarithmBase">
      <summary>Gets or sets the base of the logarithm used for the scale.</summary>
      <exception cref="T:System.ArgumentException">CanAcceptLogarithmBase
 returns false for LogarithmBase.</exception>
    </member>
    <member name="T:NationalInstruments.Controls.Data.LogarithmicRangeDataMapper`5.LogarithmicCalculator">
      <summary>
            Performs logarithmic interpolation on a value in a given range.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Range">
      <summary>
            Provides a set of static methods for creating Range&lt;T&gt; objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Range.Create``1(``0,``0)">
      <summary>
            Creates a new Range&lt;T&gt; instance with the specified minimum and maximum values.
            </summary>
      <typeparam name="TData">The data type of the range.</typeparam>
      <param name="minimum">The minimum value of the range.</param>
      <param name="maximum">The maximum value of the range.</param>
      <returns>A new Range&lt;T&gt; instance.</returns>
      <exception cref="T:System.ArgumentException">minimum (parameter) or maximum (parameter) is not a valid value for 
            TData (generic type parameter).
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value of minimum (parameter) is not less than or equal to maximum (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Range.Create(System.Object,System.Object)">
      <summary>
            Creates a new Range&lt;T&gt; instance with the specified minimum and maximum values.
            </summary>
      <param name="minimum">The minimum value of the range.</param>
      <param name="maximum">The maximum value of the range.</param>
      <returns>A new Range&lt;T&gt;  instance.</returns>
      <exception cref="T:System.ArgumentNullException">minimum (parameter) is null.
              - or -

maximum (parameter) is null.

- or -maximum (parameter) is null.</exception>
      <exception cref="T:System.ArgumentException">
            The Type of minimum (parameter) and maximum (parameter) is different.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value of minimum (parameter) is not less than or equal to maximum (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Range.Create``1(``0,``0,NationalInstruments.DataInfrastructure.Descriptors.IOpComparison{``0})">
      <summary>
            Creates a new Range&lt;T&gt; instance with the specified minimum and maximum values
            and compare method.
            </summary>
      <typeparam name="TData">The data type of the range.</typeparam>
      <param name="minimum">The minimum value of the range.</param>
      <param name="maximum">The maximum value of the range.</param>
      <param name="comparer">The descriptor to use for comparing TData (generic type parameter) instances.</param>
      <returns>A new Range&lt;T&gt; instance.</returns>
      <exception cref="T:System.ArgumentException">minimum (parameter) or maximum (parameter) is not a valid value for 
            TData (generic type parameter).
            </exception>
      <exception cref="T:System.ArgumentNullException">comparer (parameter) is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value of minimum (parameter) is not less than or equal to maximum (parameter).
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Range.TryCreate``1(``0,``0,NationalInstruments.Controls.Range{``0}@)">
      <summary>
            Tries to create a new Range&lt;T&gt; instance with the specified minimum and maximum values.
            </summary>
      <typeparam name="TData">The data type of the range.</typeparam>
      <param name="minimum">The minimum value of the range.</param>
      <param name="maximum">The maximum value of the range.</param>
      <param name="range">After the method returns, range (parameter) contains either a new  instance or an empty range if a new instance could not be created.</param>
      <returns>true if a new range was created; otherwise, false.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Range.TryCreate``1(``0,``0,NationalInstruments.DataInfrastructure.Descriptors.IOpComparison{``0},NationalInstruments.Controls.Range{``0}@)">
      <summary>
            Tries to create a new Range&lt;T&gt; instance with the specified minimum and maximum values, 
            and compare method.
            </summary>
      <typeparam name="TData">The data type of the range.</typeparam>
      <param name="minimum">The minimum value of the range.</param>
      <param name="maximum">The maximum value of the range.</param>
      <param name="comparer">The descriptor to use for comparing TData (generic type parameter) instances.</param>
      <param name="range">After the method returns, range (parameter) contains either a new  instance or an empty range if a new instance could not be created.</param>
      <returns>true if a new range was created; otherwise, false.</returns>
    </member>
    <member name="T:NationalInstruments.Controls.RangeAdjuster">
      <summary>
            Represents a strategy for adjusting the range of an IRangeDataMapper&lt;T&gt; to accommodate new data.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.RangeAdjuster.GetAdjustedRange``1(NationalInstruments.Controls.Data.BufferCollection{``0},NationalInstruments.Controls.Data.IRangeDataMapper{``0})">
      <summary>
            Returns a new range based on the current range of the data mapper and the specified data.
            </summary>
      <typeparam name="TData">The type of the data.</typeparam>
      <param name="data">The data to use to adjust the range.</param>
      <param name="mapper">The data mapper to adjust the range for.</param>
      <returns>A new range for the mapper (parameter), calculated against the data (parameter).</returns>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.-or-mapper (parameter) is null.</exception>
    </member>
    <member name="M:NationalInstruments.Controls.RangeAdjuster.GetAdjustedRangeCore``1(NationalInstruments.Controls.Data.BufferCollection{``0},NationalInstruments.Controls.Data.IRangeDataMapper{``0})">
      <summary>Implements the GetAdjustedRange``1 method.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.None">
      <summary>Gets a value that returns the same range it is given.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.FitExactly">
      <summary>Gets a value that returns a range with the smallest and largest values in the specified data.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.FitLoosely">
      <summary>Gets a value that returns a range encompassing the smallest and largest values in the specified data.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.FitVisibleExactly">
      <summary>Gets a value that returns a range with the smallest and largest values in the visible
            range of the specified data.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.FitVisibleLoosely">
      <summary>Gets a value that returns a range encompassing the smallest and largest values in the 
            visible range of the specified data.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.ContinuousChart">
      <summary>Gets a value that returns a range with the same span as the current range, shifted to accommodate the largest value.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.PagedChart">
      <summary>Gets a value that returns a range with the same span as the current range, shifted to accommodate the largest value.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.RequiresVisibleData">
      <summary>
            Gets a value indicating whether the adjuster requires only data visible in the range of other axes.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeAdjuster.UnderlyingType" />
    <member name="T:NationalInstruments.Controls.Range`1">
      <summary>
            Represents a closed range of data values, delimited by Minimum
            and Maximum.
            </summary>
      <typeparam name="TData">The data type of the range.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.Contains(`0)">
      <summary>
            Determines whether the range contains the specified value.
            </summary>
      <param name="value">The value to compare with this instance.</param>
      <returns>true if the Range&lt;T&gt; contains the value (parameter); otherwise false.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.Clip(`0)">
      <summary>
            Coerces a value to fall within the range.
            </summary>
      <param name="value">The value to coerce.</param>
      <returns>
            If the value (parameter) is less than the Minimum, Minimum is returned.
            If the value (parameter) is greater than the Maximum, Maximum is returned.
            Otherwise, the original value is returned.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.ToString" />
    <member name="M:NationalInstruments.Controls.Range`1.ToString(System.String)" />
    <member name="M:NationalInstruments.Controls.Range`1.ToString(System.IFormatProvider)" />
    <member name="M:NationalInstruments.Controls.Range`1.ToString(System.String,System.IFormatProvider)">
      <summary>
            Converts the value of this instance to its equivalent string representation, using the specified format and culture-specific format information.
            </summary>
      <param name="format">A numeric format string. The parameter can be null.</param>
      <param name="formatProvider">A format provider that supplies culture-specific formatting information. The parameter can be null.</param>
      <exception cref="T:System.FormatException">format (parameter) is invalid.
            </exception>
      <returns>The value of this instance represented as a string.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.Parse(System.String)">
      <summary>
            Converts the string representation of a range of values to its Range&lt;T&gt; equivalent.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a range of values to its Range&lt;T&gt; equivalent
            using the specified format and culture.
            </summary>
      <param name="value">A string containing the range to convert.</param>
      <param name="formatProvider">A format provider that supplies culture-specific formatting information about the string.</param>
      <returns>A Range&lt;T&gt; equivalent to the string specified in value (parameter).</returns>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">value (parameter) is not in the [value],[value] format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.TryParse(System.String,NationalInstruments.Controls.Range{`0}@)">
      <summary>
            Converts the string representation of a range of values to its Range&lt;T&gt; equivalent. 
            </summary>
      <param name="value">A string containing the range to convert.</param>
      <param name="range">A Range&lt;T&gt;  equivalent to the string specified in value (parameter).</param>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
      <returns>true if value (parameter) was converted successfully; otherwise, false.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.TryParse(System.String,System.IFormatProvider,NationalInstruments.Controls.Range{`0}@)">
      <summary>
            Converts the string representation of a range of values to its Range&lt;T&gt; equivalent
            using the specified format and culture. 
            </summary>
      <param name="value">A string containing the range to convert.</param>
      <param name="formatProvider">A format provider that supplies culture-specific formatting information about the string.</param>
      <param name="range">A Range&lt;T&gt; equivalent to the string specified in value (parameter).</param>
      <returns>true if value (parameter) was converted successfully; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.#ctor(`0,`0,NationalInstruments.DataInfrastructure.Descriptors.IOpComparison{`0})">
      <summary>
Creates a new Range&lt;T&gt;
value.
</summary>
      <param name="minimum">
The minimum value of the range.
</param>
      <param name="maximum">
The maximum value of the range.
</param>
      <param name="comparer">
An instance of IOpComparison&lt;T&gt; used
to compare minimum (parameter) and maximum (parameter).
</param>
      <exception cref="T:System.ArgumentException">minimum (parameter) or maximum (parameter) is not a valid value for 
TData (generic type parameter).
</exception>
      <exception cref="T:System.ArgumentNullException">comparer (parameter) is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
The value of minimum (parameter) is not less than or equal to maximum (parameter).
</exception>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.#ctor(`0,`0)">
      <summary>
Creates a new Range&lt;T&gt;
value.
</summary>
      <param name="minimum">
The minimum value of the range.
</param>
      <param name="maximum">
The maximum value of the range.
</param>
      <exception cref="T:System.ArgumentException">minimum (parameter) or maximum (parameter) is not a valid value for 
TData (generic type parameter).
</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
The value of minimum (parameter) is not less than or equal to maximum (parameter).
</exception>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.Equals(NationalInstruments.Controls.Range{`0})">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>true if the current object is equal to the other (parameter) parameter; otherwise, false.
            </returns>
      <param name="other">
            An object to compare with this object.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.op_Equality(NationalInstruments.Controls.Range{`0},NationalInstruments.Controls.Range{`0})">
      <summary>
            Determines whether two specified Range&lt;T&gt; objects have the same value.
            </summary>
      <returns>true if the value of left (parameter) is the same as the value of right (parameter); otherwise, false.
            </returns>
      <param name="left">
            A Range&lt;T&gt; object.
            </param>
      <param name="right">
            A Range&lt;T&gt; object.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.op_Inequality(NationalInstruments.Controls.Range{`0},NationalInstruments.Controls.Range{`0})">
      <summary>
            Determines whether two specified Range&lt;T&gt; objects have different values.
            </summary>
      <returns>true if the value of left (parameter) is the same as the value of right (parameter); otherwise, false.
            </returns>
      <param name="left">
            A Range&lt;T&gt; object.
            </param>
      <param name="right">
            A Range&lt;T&gt; object.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.Equals(System.Object)">
      <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
      <returns>true if the specified Object is equal to the current Object; otherwise, false.
            </returns>
      <param name="obj">
            The Object to compare with the current Object.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Range`1.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current Object.
            </returns>
    </member>
    <member name="P:NationalInstruments.Controls.Range`1.IsEmpty">
      <summary>
            Gets a value indicating whether the range is empty.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Range`1.IsInfinite">
      <summary>
            Gets a value indicating whether Minimum or Maximum is infinite.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Range`1.Minimum">
      <summary>Gets the minimum value of the range.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Range`1.Maximum">
      <summary>Gets the maximum value of the range.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Range`1.Comparer">
      <summary>Gets the %see:type% descriptor used to compare %typeparamref:TData% values.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.Data.RelativeValueUnit">
      <summary>
            Represents the unit for scaled relative values.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Data.RelativeValueUnit.ToStringCore(System.String,System.IFormatProvider)" />
    <member name="M:NationalInstruments.Controls.Data.RelativeValueUnit.CreateConverter``1(NationalInstruments.DataInfrastructure.Unit)" />
    <member name="M:NationalInstruments.Controls.Data.RelativeValueUnit.EqualsCore(NationalInstruments.DataInfrastructure.Unit)" />
    <member name="M:NationalInstruments.Controls.Data.RelativeValueUnit.GetHashCodeCore" />
    <member name="P:NationalInstruments.Controls.Data.RelativeValueUnit.Instance">
      <summary>Gets the unit for scaled relative values.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsValidEnum``1(System.Object)">
      <summary>Validates the specified T (generic type parameter) enum value is defined by the enum, or as a combination of enum flags.</summary>
      <typeparam name="T">The type of the enum.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsNotNull``1(System.Object)">
      <summary>Validates that the value is not null.</summary>
      <typeparam name="T">The type of the value, which must be a reference type.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsNotEmptyRange``1(System.Object)">
      <summary>Validates that the Range&lt;T&gt; value is not empty.</summary>
      <typeparam name="TData">The TData type of the range.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsNotEmptyOrInfiniteRange``1(System.Object)">
      <summary>Validates that the Range&lt;T&gt; value is not empty or infinite.</summary>
      <typeparam name="TData">The TData type of the range.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsNotSpecialValue``1(System.Object)">
      <summary>Validates that the numeric value is not a special value (e.g. infinity, NaN).</summary>
      <typeparam name="T">The type of the numeric value.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsNotInfinite``1(System.Object)">
      <summary>Validates that the numeric value is not infinity.</summary>
      <typeparam name="T">The type of the numeric value.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsNotNegative``1(System.Object)">
      <summary>Validates that the numeric value is greater than or equal to zero.</summary>
      <typeparam name="T">The type of the numeric value.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsNotNegativeOrSpecialValue``1(System.Object)">
      <summary>Validates that the numeric value is not negative or a special value (e.g. infinity, NaN).</summary>
      <typeparam name="T">The type of the numeric value.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.IsGreaterThanZeroAndNotSpecialValue``1(System.Object)">
      <summary>Validates that the numeric value is greater than zero and not a special value (e.g. infinity, NaN).</summary>
      <typeparam name="T">The type of the numeric value.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyCallbacks.CoerceNonNegative``1(System.Windows.DependencyObject,System.Object)">
      <summary>Coerces negative numeric values to zero.</summary>
      <typeparam name="T">The type of the numeric value.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.RangeAutoDivider`1.CalculateNiceInterval(System.Double,System.Double,System.Int32)">
      <summary>
            Calculate an interval between min and max that results in a friendly number of subdivisions (half, quarters, equal thirds, etc.) based
            on how big the labels for those regions would end up being. "Friendly" in this case is defined by an Internet-found algorithm that tends
            to make divisions of 2, 5, and 10 and multiples thereof.
            </summary>
      <param name="min">Minimum value of the range</param>
      <param name="max">Maximum value of the range</param>
      <param name="divisionsEstimate">MUST be 2 or greater. Do not pass smaller numbers.</param>
      <returns>The interval.</returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.CollectionViewSynchronizer.SourceFactoryProperty">
      <summary>
            Identifies the SourceFactory dependency property.
            </summary>
      <returns>
            The identifier for the SourceFactory dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.CollectionViewSynchronizer.SourceCollectionProperty">
      <summary>
            Identifies the SourceCollection dependency property.
            </summary>
      <returns>
            The identifier for the SourceCollection dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.CollectionViewSynchronizer.TargetCollectionProperty">
      <summary>
            Identifies the TargetCollection dependency property.
            </summary>
      <returns>
            The identifier for the TargetCollection dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.CollectionViewSynchronizer.ItemConverterProperty">
      <summary>
            Identifies the ItemConverter dependency property.
            </summary>
      <returns>
            The identifier for the ItemConverter dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.CollectionViewSynchronizer.CreateInstanceCore" />
    <member name="P:NationalInstruments.Controls.Primitives.CollectionViewSynchronizer.SourceViewListener">
      <summary>
            Gets or sets a weak event listener for the CollectionChanged event.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Converters.EnumFlagMatcher">
      <summary>
            Uses the bitwise AND operator (&amp;) on numeric values to determine whether a value is a match for a target value.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Converters.IValueMatcher">
      <summary>
            Represents an object with the capability to determine if a given value matches a
            target value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.IValueMatcher.IsMatch(System.Object,System.Object)">
      <summary>
            Determines whether the given value matches the given target value.
            </summary>
      <param name="value">A value to test.</param>
      <param name="target">The target value to match against.</param>
      <returns>true if value (parameter) matches target (parameter); otherwise, false.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.EnumFlagMatcher.#ctor">
      <summary>
            Initializes a new instance of the EnumFlagMatcher class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.EnumFlagMatcher.IsMatch(System.Object,System.Object)" />
    <member name="M:NationalInstruments.Controls.Converters.EnumFlagMatcher.ToString" />
    <member name="P:NationalInstruments.Controls.Converters.EnumFlagMatcher.MatchOnAnyFlag">
      <summary>
            Gets or sets a value indicating whether a value must match all flags (the default), or whether a value can match any flag.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Converters.EqualityMatcher">
      <summary>
            Uses value equality to determine whether a value is a match for a target value.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Converters.EqualityMatcher.Default">
      <summary>
            Gets the default equality matcher.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.EqualityMatcher.#ctor">
      <summary>
            Initializes a new instance of the EqualityMatcher class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.EqualityMatcher.IsMatch(System.Object,System.Object)" />
    <member name="M:NationalInstruments.Controls.Converters.EqualityMatcher.ToString" />
    <member name="T:NationalInstruments.Controls.Internal.ScopedVariable`1">
      <summary>
            Represents a variable that can be set within a using scope.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.ScopedVariable`1.#ctor(System.String,`0)">
      <summary>
            Initializes a new instance of the ScopedVariable&lt;T&gt; class.
            </summary>
      <param name="name">The friendly name of the variable.</param>
      <param name="defaultValue">The default value of the variable.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.ScopedVariable`1.SetValue(`0)">
      <summary>
            Sets the value of the variable and returns an object that can be used to reset the variable to its default value.
            </summary>
      <returns>An object that can be used to reset the variable to its default value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.ScopedVariable`1.ToString" />
    <member name="P:NationalInstruments.Controls.Internal.ScopedVariable`1.Name">
      <summary>
            Gets the friendly name of the variable.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScopedVariable`1.DefaultValue">
      <summary>
            Gets the default value of the variable.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScopedVariable`1.Value">
      <summary>
            Gets the current value of the variable.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.ScopedVariable`1.IsSet">
      <summary>
            Gets a value indicating whether Value has been set to something other than DefaultValue.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.DependencyPropertyListener.TargetProperty">
      <summary>
            Identifies the Target dependency property.
            </summary>
      <returns>
            The identifier for the Target dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyListener.#ctor(System.Windows.DependencyObject,System.String)">
      <summary>
            Initializes a new instance of the DependencyPropertyListener class with the specified source and propertyName.
            </summary>
      <param name="source">
            The source dependency object to monitor.
            </param>
      <param name="propertyName">
            The name of the dependency property on the source to monitor.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.DependencyPropertyListener.OnChanged(NationalInstruments.Controls.Internal.DependencyPropertyListenerChangedEventArgs)">
      <summary>
            Raises the Changed event.
            </summary>
      <exception cref="T:System.ArgumentNullException">e (parameter) is null.
            </exception>
      <param name="e">
            An instance of DependencyPropertyListenerChangedEventArgs that contains the event data.
            </param>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.DependencyPropertyListener.Source">
      <summary>
            Gets the source dependency object to monitor.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.DependencyPropertyListener.PropertyName">
      <summary>
            Gets the name of the dependency property on the source to monitor.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.DependencyPropertyListener.OnlyReferenceChanges">
      <summary>
            Gets or sets a value indicating whether only reference changes should cause a Changed event.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Internal.DependencyPropertyListener.Target">
      <summary>
            Gets or sets private dependency property target used to listen for changes in the source dependency property.
            </summary>
    </member>
    <member name="E:NationalInstruments.Controls.Internal.DependencyPropertyListener.Changed">
      <summary>
            Occurs when the source dependency property is changed.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Converters.MatchedValueConverter">
      <summary>
            Converts an input value to a result value by returning the first Result in the Matches collection
            that has a matching Value, or returns DefaultResult if no match can be found.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.MatchedValueConverter.#ctor">
      <summary>
            Initializes a new instance of the MatchedValueConverter class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.MatchedValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Returns the first Result in Matches where value (parameter) matches Value,
            or returns DefaultResult if no matching Value is found.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.MatchedValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Returns the first Value in Matches where value (parameter) matches Result,
            or returns DefaultValue if no matching Result is found.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Converters.MatchedValueConverter.Matches">
      <summary>
            Gets the collection of MatchPair values to search for a match on the value passed to Convert.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Converters.MatchedValueConverter.DefaultValue">
      <summary>
            Gets or sets the default value to return if no MatchPair in Matches
            has a Value equal to the passed to ConvertBack.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Converters.MatchedValueConverter.DefaultResult">
      <summary>
            Gets or sets the default result to return if no MatchPair in Matches
            has a Value equal to the passed to Convert.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Converters.MatchedValueConverter.ValueMatcher">
      <summary>
            Gets or sets the IValueMatcher to use when determining which MatchPair is a match for the value passed to Convert.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Converters.MatchPair">
      <summary>
            Identifies a target value and result pair for MatchedValueConverter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.MatchPair.#ctor">
      <summary>
            Initializes a new instance of the MatchPair class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.MatchPair.GetConvertedValue(System.Object)">
      <summary>
            Converts Value to the same type as the specified source value.
            </summary>
      <param name="sourceValue">The object whose type determines what Value will be converted to.</param>
      <returns>Value converted to the type of sourceValue (parameter).</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.MatchPair.GetConvertedValue(System.Type)">
      <summary>
            Converts Value to the specified type.
            </summary>
      <param name="valueType">The type that Value will be converted to.</param>
      <returns>Value converted to the type of valueType (parameter).</returns>
      <exception cref="T:System.ArgumentNullException">valueType (parameter) is null.</exception>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.MatchPair.GetConvertedResult(System.Object)">
      <summary>
            Converts Result to the same type as the specified source result.
            </summary>
      <param name="sourceResult">The object whose type determines what Result will be converted to.</param>
      <returns>Result converted to the type of sourceResult (parameter).</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.MatchPair.GetConvertedResult(System.Type)">
      <summary>
            Converts Result to the specified type.
            </summary>
      <param name="resultType">The type that Result will be converted to.</param>
      <returns>Result converted to the type of resultType (parameter).</returns>
      <exception cref="T:System.ArgumentNullException">resultType (parameter) is null.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.Converters.MatchPair.Value">
      <summary>
            Gets or sets the value for Convert to match against.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.Converters.MatchPair.Result">
      <summary>
            Gets or sets the result to return when the value passed to Convert matches Value.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Converters.RangeConverter">
      <summary>
            Converts a Range&lt;T&gt; to and from a String.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.RangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.RangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.RangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    <member name="M:NationalInstruments.Controls.Converters.RangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
    <member name="M:NationalInstruments.Controls.Converters.RangeConverter.GetInputParts(System.String,System.IFormatProvider)">
      <summary>Splits a input string into an array of parts, based on the list separator of the culture.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.RangeConverter.GetRangeArgumentType(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets the TData type of the range from the context, or null if the context does not have a strong-typed range destination.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Converters.RangeConverter.GetRangeArgumentType(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>Gets the TData type of the range from the context or input string, falling back on Double.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.AngleUtility.GetInverseAngle(System.Windows.Point,System.Windows.Size)">
      <summary>
            Gets the angle of a target point relative to a center of a given area.
            </summary>
      <param name="target">The target point.</param>
      <param name="area">The bounding area whose center is used to calculate angle.</param>
      <returns>The angle at which the target is from the center, in the range of [-180, 180]</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.AngleUtility.GetInverseAngle(System.Windows.Point,System.Windows.Point)">
      <summary>
            Gets the angle of a target point relative to a center point. See also GetAbsoluteAngle
            </summary>
      <param name="target">The target point.</param>
      <param name="center">The center point.</param>
      <returns>The angle at which the target is from the center, in the range of [-180, 180]. Zero degrees is 
            at 3 o'clock and positive values are counterclockwise from that point.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.AngleUtility.GetAbsoluteAngle(System.Windows.Point,System.Windows.Point)">
      <summary>
            Gets the angle of a target point relative to a center point. See also GetInverseAngle.
            </summary>
      <param name="target">The target point.</param>
      <param name="center">The center point.</param>
      <returns>The angle at which the target is from the center, in the range of [0, 360]. Zero degrees is 
            at 3 o'clock and positive values are counterclockwise from that point.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.AngleUtility.GetMinimumCircularAngle(System.Double,System.Double)">
      <summary>
            Returns the minimal difference between two angle.
            </summary>
      <param name="angle1">The first angle.</param>
      <param name="angle2">The second angle.</param>
      <returns>An angle in the range [-180, 180].</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.AngleUtility.ModAngleToBetween0And360(System.Double)">
      <summary>
            Coerces an angle to the range [0, 360).
            </summary>
      <param name="angle">Original angle</param>
      <returns>Coerced angle</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.AngleUtility.ModAngleToBetweenNegAndPos360(System.Double,System.Boolean)">
      <summary>
            Coerces an angle to the sweep angle range [-360, 360] or (-360, 360) depending upon the value of "inclusive".
            </summary>
      <param name="angle">Original angle</param>
      <param name="inclusive">If true, -360 and 360 are legal return values. If false, these will be coerced to zero.</param>
      <returns>Coerced angle</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.AngleUtility.DegreesToRadians(System.Double)">
      <summary>
            Converts a value in degrees into a value in radians.
            </summary>
      <param name="degrees">Angle in degrees</param>
      <returns>Angle in radians</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.AngleUtility.RadiansToDegrees(System.Double)">
      <summary>
            Converts a value in radians into a value in degrees.
            </summary>
      <param name="radians">Angle in radians</param>
      <returns>Angle in degrees</returns>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.ScopedFlag">
      <summary>
            Represents a boolean flag that can be set within a using scope.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.ScopedFlag.#ctor(System.String)">
      <summary>
            Initializes a new instance of the ScopedFlag class.
            </summary>
      <param name="name">The friendly name of the flag being set.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.ScopedFlag.SetFlag">
      <summary>
            Sets the flag and returns an object that can be used to reset the flag.
            </summary>
      <returns>An object that can be used to reset the flag.</returns>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.SingleItemCache`2">
      <summary>
            Caches the construction of a single item from a source object. A new item is only constructed when the source object changes.
            </summary>
      <typeparam name="TSource">The type of the source object used to create the item.</typeparam>
      <typeparam name="TItem">The type of the cached item.</typeparam>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.SingleItemCache`2.#ctor(System.Func{`0,`1})">
      <summary>
            Initializes a new instance of the SingleItemCache&lt;T1,T2&gt; class with the specified item creator.
            </summary>
      <param name="createItem">The method to use to create an item from a source object.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.SingleItemCache`2.GetItem(`0)">
      <summary>
            Retrieves the item from the cache.
            </summary>
      <param name="source">The object used to construct the item.</param>
      <returns>The cached item, or a new item if source (parameter) is different .</returns>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.ObjectCollection">
      <summary>
            A NotifyingCollection&lt;T&gt; of Object.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.RangeScaleKind">
      <summary>
            Specifies the position of values on a scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.RangeScaleKind.CreateLogarithmKind(System.Object)">
      <summary>Creates an object that positions values using the specified logarithm of the value.</summary>
      <param name="logarithmBase">The base of the logarithm to use.</param>
      <returns>An object that positions values using a logarithm with a base of logarithmBase (parameter).</returns>
    </member>
    <member name="M:NationalInstruments.Controls.RangeScaleKind.CreateDataMapper``1">
      <summary>
            Creates the data mapper used to position values in a scale.
            </summary>
      <typeparam name="TData">The data type of the created data mapper.</typeparam>
      <returns>An IRangeDataMapper&lt;T&gt; used to position values in a scale.</returns>
      <exception cref="T:System.InvalidOperationException">
            An IRangeDataMapper&lt;T&gt; cannot be created for the specified TData (generic type parameter) data type.
            </exception>
    </member>
    <member name="P:NationalInstruments.Controls.RangeScaleKind.Linear">
      <summary>Gets an object that positions values linearly.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeScaleKind.LogarithmBase10">
      <summary>Gets an object that positions values using the base-10 logarithm of the value.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeScaleKind.LogarithmBase2">
      <summary>Gets an object that positions values using the base-2 logarithm of the value.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeScaleKind.LogarithmBaseE">
      <summary>Gets an object that positions values using the natural logarithm of the value.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeScaleKind.UnderlyingType" />
    <member name="T:NationalInstruments.Controls.RelativeAlignment">
      <summary>
            Defines the different alignments a child object can have.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.RelativeAlignment.Near">
      <summary>
            The child object is aligned to the near side of the parent area, as defined by the parent.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.RelativeAlignment.Center">
      <summary>
            The child object is aligned to the center of the parent area.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.RelativeAlignment.Far">
      <summary>
            The child object is aligned to the far side of the parent area, as defined by the parent.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FreezableExtensions.SafeFreeze``1(``0)">
      <summary>
            In WPF, calls Freeze on the specified Freezable value.
            In  SL, calls Freeze on the specified value if it implements IFreezable.
            Allows null values.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FreezableExtensions.SafeIsFrozen``1(``0)">
      <summary>
            In WPF, calls IsFrozen on the specified Freezable value.
            In  SL, calls IsFrozen on the specified value if it implements IFreezable.
            Allows null values.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.Internal.FreezableExtensions.CloneType">
      <summary>
            Represents the different clone operations that can occur on Freezable values.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.ScaleDivisions">
      <summary>
            Represents a set of divisions on a scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.ScaleDivisions.#ctor">
      <summary>
            Initializes a new instance of the ScaleDivisions class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.ScaleDivisions.SetTickBindings(System.Windows.UIElement,NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Updates the visual tick marks on the scale with settings defined on the scale divisions.
            </summary>
      <param name="tick">A tick mark on the scale.</param>
      <param name="presenter">The presenter where divisions are being displayed.</param>
      <exception cref="T:System.ArgumentNullException">tick (parameter) is null.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.ScaleDivisions.GetBinding(System.String)">
      <summary>
            Retrieves a cached binding instance with the specified property path.
            </summary>
      <param name="propertyPath">The path to a property on this object instance.</param>
      <returns>A cached binding instance with Path set to propertyPath (parameter) and Source set to this instance.</returns>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleDivisions.TickVisibilityProperty">
      <summary>
            Identifies the TickVisibility dependency property.
            </summary>
      <returns>
            The identifier for the TickVisibility dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleDivisions.TickMarkProperty">
      <summary>
            Identifies the TickMark dependency property.
            </summary>
      <returns>
            The identifier for the TickMark dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleDivisions.TickSizeProperty">
      <summary>
            Identifies the TickSize dependency property.
            </summary>
      <returns>
            The identifier for the TickSize dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleDivisions.BaselineAlignmentProperty">
      <summary>
            Identifies the BaselineAlignment dependency property.
            </summary>
      <returns>
            The identifier for the BaselineAlignment dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleDivisions.TickBrushProperty">
      <summary>
            Identifies the TickBrush dependency property.
            </summary>
      <returns>
            The identifier for the TickBrush dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.ScaleDivisions.CreateInstanceCore" />
    <member name="P:NationalInstruments.Controls.ScaleDivisions.TickVisibility">
      <summary>Gets or sets the visibility of the tick marks on the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ScaleDivisions.TickMark">
      <summary>Gets or sets the shape of the tick marks on the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ScaleDivisions.TickSize">
      <summary>Gets or sets the size of the tick marks on the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ScaleDivisions.BaselineAlignment">
      <summary>Gets or sets the alignment of the tick marks with the scale baseline.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ScaleDivisions.TickBrush">
      <summary>Gets or sets the brush used to draw tick marks on the scale.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.MathUtility.DoublePrecisionDecimalDigits">
      <summary>Gets the maximum digits of precision for Double values.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.MathUtility.InfiniteSize">
      <summary>Gets a Size with a width and height of PositiveInfinity.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.MathUtility.AutoThickness">
      <summary>Gets a Thickness with all "auto" (NaN) values.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.MathUtility.ZeroMatrix">
      <summary>Gets a Matrix with all-zero values.</summary>
    </member>
    <member name="F:NationalInstruments.Controls.Internal.MathUtility.VisibleRelativeRange">
      <summary>Gets a value representing the visible bounds for relative data.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.UseIfSmaller(System.Double,System.Double@)">
      <summary>
            Assigns value (parameter) to target (parameter), if value (parameter) is smaller.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.UseIfLarger(System.Double,System.Double@)">
      <summary>
            Assigns value (parameter) to target (parameter), if value (parameter) is larger.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.UseIfSmaller(System.Int32,System.Int32@)">
      <summary>
            Assigns value (parameter) to target (parameter), if value (parameter) is smaller.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.UseIfLarger(System.Int32,System.Int32@)">
      <summary>
            Assigns value (parameter) to target (parameter), if value (parameter) is larger.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.PositiveMagnitude(System.Double)">
      <summary>
            Returns the magnitude of value (parameter), if value (parameter) is positive;
            otherwise, returns zero.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.NegativeMagnitude(System.Double)">
      <summary>
            Returns the magnitude of value (parameter), if value (parameter) is negative;
            otherwise, returns zero.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.AreClose(System.Double,System.Double)">
      <summary>
            Determines if the two screen values are close.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.IsVisible(System.Windows.Point)">
      <summary>
            Determines if the given relative position is visible.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.Interpolate(System.Windows.Point,System.Windows.Point,System.Double)">
      <summary>
            Returns an interpolated set of points between start (parameter) and end (parameter) exclusive,
            using the X range to determine the number of interpolated values.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.CreateRotationMatrix(System.Double)">
      <summary>
            Creates a rotation matrix for the specified angle.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
      <param name="matrix1">First matrix.</param>
      <param name="matrix2">Second matrix.</param>
      <returns>Multiplication result.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.Transform(System.Windows.Media.Matrix,System.Windows.Size)">
      <summary>
            Transforms the size by applying the specified matrix.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.Transform(System.Windows.Media.Matrix,System.Windows.Rect)">
      <summary>
            Transforms the rectangle by applying the specified matrix.
            </summary>
      <param name="matrix">A matrix that specifies the transformation to apply.</param>
      <param name="rect">The rectangle to transform.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.PositiveModulus(System.Double,System.Double)">
      <summary>
            Performs the modulus operation, always returning a positive value.
            </summary>
      <param name="value">The value to take the modulus of.</param>
      <param name="divisor">The amount to mod the value by.</param>
      <returns>The positive remainder.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.NearestModulus(System.Double,System.Double)">
      <summary>
            Performs the modulus operation, returning whichever of the negative or positive modulus that is closer to zero.
            </summary>
      <param name="value">The value to take the modulus of.</param>
      <param name="divisor">The amount to mod the value by.</param>
      <returns>The positive or negative remainder.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.MathUtility.Round(System.Windows.Media.Matrix)">
      <summary>
            Rounds the transformational values of the matrix to double's maximum precision.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.GetVisualChildren(System.Windows.DependencyObject)">
      <summary>
            Enumerates the visual children returned by VisualTreeHelper.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.GetAncestorsInclusive``1(System.Windows.DependencyObject,System.Predicate{System.Windows.DependencyObject})">
      <summary>
            Finds all visual tree ancestor of the specified type T (generic type parameter).
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.GetAncestor``1(System.Windows.DependencyObject,System.Predicate{System.Windows.DependencyObject})">
      <summary>
            Finds the first visual tree ancestor of the specified type T (generic type parameter), 
            or null if an ancestor of that type could not be found.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.GetName(System.Windows.DependencyProperty,System.Type)">
      <summary>
            Returns the name of a DependencyProperty.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.GetPropertyType(System.Windows.DependencyProperty,System.Type)">
      <summary>
            Returns the property type of a DependencyProperty.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.CreateBinding(System.Object,System.Windows.DependencyProperty)">
      <summary>
            Creates a new Binding with the specified source object and targeting the specified DependencyProperty.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.CreateBinding(System.Object,System.String)">
      <summary>
            Creates a new Binding with the specified source object and targeting the specified
            DependencyProperty name.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.CreateBinding(System.Object,System.Windows.DependencyProperty,System.Windows.Data.IValueConverter)">
      <summary>
            Creates a new Binding with the specified source object and targeting the specified
            DependencyProperty, with the specified IValueConverter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.CreateBinding(System.Object,System.String,System.Windows.Data.IValueConverter)">
      <summary>
            Creates a new Binding with the specified source object and targeting the specified
            DependencyProperty name, with the specified IValueConverter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>
            Clears any binding on the specified target object for the specified DependencyProperty.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.RegisterClassCommandBindings(System.Type,System.Windows.Input.CommandBinding[])">
      <summary>
            Registers a class command binding for a Control type.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.EnableSilverlightClassCommandBindings(System.Windows.Controls.Control)">
      <summary>
            Workaround for a limitation in LV Core's implementation of class command bindings.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.GetInputBindings(System.Windows.Controls.Control)">
      <summary>Retrieves the collection of input bindings for a control.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.IsHorizontal(System.Windows.Controls.Orientation)">
      <summary>Determines whether an orientation is horizontal.</summary>
      <param name="orientation">The orientation.</param>
      <returns>True if the orientation is horizontal.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Internal.FrameworkExtensions.IsVertical(System.Windows.Controls.Orientation)">
      <summary>Determines whether an orientation is vertical.</summary>
      <param name="orientation">The orientation.</param>
      <returns>True if the orientation is vertical.</returns>
    </member>
    <member name="T:NationalInstruments.Controls.Primitives.RangeScale">
      <summary>
            Provides an abstract base class for all scales that use a range.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.RangeScale.Present``1(NationalInstruments.Controls.Primitives.ScalePresenter,NationalInstruments.Controls.Data.IRangeDataMapper{``0},System.Boolean)">
      <summary>
            Updates the visual representation of the major and minor divisions in the specified presenter.
            </summary>
      <param name="presenter">A ScalePresenter where the scale should be displayed.</param>
      <param name="dataMapper">The range data mapper for the scale.</param>
      <param name="isRangeEditable">A value indicating whether interactive modification of the data mapper range is allowed.</param>
      <typeparam name="TData">The data type of the scale.</typeparam>
      <returns>The NotifyingCollection&lt;T&gt; of major divisions on the scale.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.RangeScale.Present(System.Type,NationalInstruments.Controls.Primitives.ScalePresenter,NationalInstruments.Controls.Data.IDataMapper,System.Boolean)">
      <summary>
            Calls the strongly-typed Present``1 method with the specified data type argument.
            </summary>
      <param name="dataType">The data type argument for the Present``1 method.</param>
      <param name="presenter">A ScalePresenter where the scale should be displayed.</param>
      <param name="dataMapper">The range data mapper for the scale.</param>
      <param name="isRangeEditable">A value indicating whether interactive modification of the data mapper range is allowed.</param>
    </member>
    <member name="M:NationalInstruments.Controls.Primitives.RangeScale.Clean(NationalInstruments.Controls.Primitives.ScalePresenter)" />
    <member name="M:NationalInstruments.Controls.Primitives.RangeScale.ToString" />
    <member name="F:NationalInstruments.Controls.Primitives.RangeScale.MajorDivisionsProperty">
      <summary>
            Identifies the MajorDivisions dependency property.
            </summary>
      <returns>
            The identifier for the MajorDivisions dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.Primitives.RangeScale.MinorDivisionsProperty">
      <summary>
            Identifies the MinorDivisions dependency property.
            </summary>
      <returns>
            The identifier for the MinorDivisions dependency property.
            </returns>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.RangeScale.MajorDivisions">
      <summary>Gets or sets the major divisions for the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.Primitives.RangeScale.MinorDivisions">
      <summary>Gets or sets the minor divisions for the scale.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.RangeDivisions">
      <summary>
            Describes how to render the minor divisions for a RangeScale.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisions.Present``1(NationalInstruments.Controls.Primitives.ScalePresenter,NationalInstruments.Controls.Data.IRangeDataMapper{``0},NationalInstruments.Controls.Primitives.NotifyingCollection{``0})">
      <summary>
            Updates the visual representation of the scale divisions in the specified presenter.
            </summary>
      <typeparam name="TData">The data type of the divisions.</typeparam>
      <param name="presenter">A ScalePresenter where the scale divisions are to be displayed.</param>
      <param name="dataMapper">The data mapper for the scale.</param>
      <param name="majorDivisions">The major divisions generated for the scale.</param>
      <exception cref="T:System.ArgumentNullException">presenter (parameter) is null.-OR-dataMapper (parameter) is null.</exception>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisions.Clean(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Clears the visual representation of the scale divisions from the specified presenter.
            </summary>
      <param name="presenter">The ScalePresenter from which to clear the visual representation of the scale divisions. </param>
      <exception cref="T:System.ArgumentNullException">presenter (parameter) is null.
            </exception>
    </member>
    <member name="F:NationalInstruments.Controls.RangeDivisions.ModeProperty">
      <summary>
            Identifies the Mode dependency property.
            </summary>
      <returns>
            The identifier for the Mode dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.RangeDivisions.MinorDivisionsPresenterProperty">
      <summary>
            Identifies the MinorDivisionsPresenter attached property.
            </summary>
      <returns>
            The identifier for the MinorDivisionsPresenter attached property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisions.GetMinorDivisionsPresenter(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Gets the value of the MinorDivisionsPresenter attached property for a specified UIElement.
            </summary>
      <returns>
            The MinorDivisionsPresenter property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisions.SetMinorDivisionsPresenter(NationalInstruments.Controls.Primitives.ScalePresenter,NationalInstruments.Controls.Internal.ScaleDivisionsPresenter)">
      <summary>
            Sets the value of the MinorDivisionsPresenter attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed ScaleDivisionsPresenter value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisions.CreateInstanceCore" />
    <member name="P:NationalInstruments.Controls.RangeDivisions.Mode">
      <summary>Gets or sets the type used to generate the divisions that display a range.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.RangeLabeledDivisions">
      <summary>
            Represents a set of labeled divisions on a range scale.
            </summary>
    </member>
    <member name="T:NationalInstruments.Controls.ScaleLabeledDivisions">
      <summary>Provides labels for divisions on the scale.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.ScaleLabeledDivisions.SetLabelBindings(System.Windows.UIElement,NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Updates the visual label with settings defined on the scale divisions.
            </summary>
      <param name="label">A visual label on the scale. </param>
      <param name="presenter">The presenter where the divisions are displayed.</param>
      <exception cref="T:System.ArgumentNullException">label (parameter) is null.
            </exception>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleLabeledDivisions.LabelOrientationProperty">
      <summary>
            Identifies the LabelOrientation dependency property.
            </summary>
      <returns>
            The identifier for the LabelOrientation dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleLabeledDivisions.LabelVisibilityProperty">
      <summary>
            Identifies the LabelVisibility dependency property.
            </summary>
      <returns>
            The identifier for the LabelVisibility dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleLabeledDivisions.LabelBrushProperty">
      <summary>
            Identifies the LabelBrush dependency property.
            </summary>
      <returns>
            The identifier for the LabelBrush dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ScaleLabeledDivisions.LabelPresenterProperty">
      <summary>
            Identifies the LabelPresenter dependency property.
            </summary>
      <returns>
            The identifier for the LabelPresenter dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.ScaleLabeledDivisions.CreateInstanceCore" />
    <member name="P:NationalInstruments.Controls.ScaleLabeledDivisions.LabelOrientation">
      <summary>Gets or sets the relative orientation of the labels on the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ScaleLabeledDivisions.LabelVisibility">
      <summary>Gets or sets the visibility of the labels on the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ScaleLabeledDivisions.LabelBrush">
      <summary>Gets or sets the brush used to display the labels on the scale.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ScaleLabeledDivisions.LabelPresenter">
      <summary>Gets or sets the presenter or formatter for the labels on the scale.</summary>
    </member>
    <member name="M:NationalInstruments.Controls.RangeLabeledDivisions.Present``1(NationalInstruments.Controls.Primitives.ScalePresenter,NationalInstruments.Controls.Data.IRangeDataMapper{``0},System.Boolean)">
      <summary>
            Updates the visual representation of the scale divisions in the specified presenter.
            </summary>
      <typeparam name="TData">The data type of the divisions.</typeparam>
      <param name="presenter">A ScalePresenter where the scale divisions are to be displayed.</param>
      <param name="dataMapper">The data mapper for the scale.</param>
      <param name="isRangeEditable">A value indicating whether the range can be interactively edited.</param>
      <returns>The major divisions of the scale that this instance generates.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.RangeLabeledDivisions.Clean(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Clears the visual representation of the scale divisions from the specified presenter.
            </summary>
      <param name="presenter">A ScalePresenter  from which to clear the visual representation of the scale divisions.</param>
      <exception cref="T:System.ArgumentNullException">presenter (parameter) is null.
            </exception>
    </member>
    <member name="F:NationalInstruments.Controls.RangeLabeledDivisions.ModeProperty">
      <summary>
            Identifies the Mode dependency property.
            </summary>
      <returns>
            The identifier for the Mode dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.RangeLabeledDivisions.MajorDivisionsPresentersProperty">
      <summary>
            Identifies the MajorDivisionsPresenters attached property.
            </summary>
      <returns>
            The identifier for the MajorDivisionsPresenters attached property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.RangeLabeledDivisions.GetMajorDivisionsPresenters(NationalInstruments.Controls.Primitives.ScalePresenter)">
      <summary>
            Gets the value of the MajorDivisionsPresenters attached property for a specified UIElement.
            </summary>
      <returns>
            The MajorDivisionsPresenters property value for the element.
            </returns>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element from which the property value is read.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.RangeLabeledDivisions.SetMajorDivisionsPresenters(NationalInstruments.Controls.Primitives.ScalePresenter,System.Tuple{NationalInstruments.Controls.Internal.ScaleDivisionsPresenter,NationalInstruments.Controls.Internal.ScaleDivisionsPresenter})">
      <summary>
            Sets the value of the MajorDivisionsPresenters attached property to a specified element.
            </summary>
      <exception cref="T:System.ArgumentNullException">element (parameter) is null.
            </exception>
      <param name="element">
            The element to which the attached property is written.
            </param>
      <param name="value">
            The needed Tuple&lt;T1,T2&gt; value.
            </param>
    </member>
    <member name="M:NationalInstruments.Controls.RangeLabeledDivisions.CreateInstanceCore" />
    <member name="P:NationalInstruments.Controls.RangeLabeledDivisions.Mode">
      <summary>Gets or sets the type used to generate the labeled divisions  that display a range.</summary>
    </member>
    <member name="T:NationalInstruments.Controls.RangeDivisionsMode">
      <summary>
            Represents a class used to subdivide a range into minor divisions.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisionsMode.CreateCountMode(System.Int32)">
      <summary>Divides a range into a specified number of divisions.</summary>
      <param name="count">The number of divisions to create for a range.</param>
      <returns>A value that divides a range into count (parameter) divisions.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">count (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisionsMode.CreateIntervalMode(System.Object,System.Object)">
      <summary>Divides a range by starting at a base value and incrementing by a set interval through the range.</summary>
      <param name="intervalBase">The starting offset for the interval.</param>
      <param name="interval">The interval to increment for each value in the range.</param>
      <returns>A value that divides a range by starting at a base value and incrementing by an interval through the range.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisionsMode.GetDivisions``1(NationalInstruments.Controls.Data.IRangeDataMapper{``0},System.Int32)">
      <summary>Creates a set of division data values for the specified data mapper.</summary>
      <param name="mapper">The range data mapper to subdivide.</param>
      <param name="divisionsEstimate">
            The estimated number of divisions that will fit in the display area,
            or a default value if RequiresDivisionsEstimate is false.
            </param>
      <typeparam name="TData">The data type of the mapper.</typeparam>
      <returns>An ordered set of data values dividing the range of mapper (parameter).</returns>
    </member>
    <member name="M:NationalInstruments.Controls.RangeDivisionsMode.GetSubdivisions``1(NationalInstruments.Controls.Data.IRangeDataMapper{``0},System.Collections.Generic.IList{``0})">
      <summary>Creates a set of division data values dependent on the specified set of divisions.</summary>
      <param name="mapper">The range data mapper being subdivided.</param>
      <param name="dependentDivisions">The ordered set of full-range divisions returned from GetDivisions``1.</param>
      <typeparam name="TData">The data type of the mapper.</typeparam>
      <returns>An ordered set of data values dividing each pair of values in dependentDivisions (parameter).</returns>
    </member>
    <member name="P:NationalInstruments.Controls.RangeDivisionsMode.Auto">
      <summary>Gets a value that determines an appropriate range interval.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeDivisionsMode.RequiresDivisionsEstimate">
      <summary>
            Gets a value indicating whether a value is required for the divisionsEstimate parameter of 
            GetDivisions``1.
            </summary>
    </member>
    <member name="P:NationalInstruments.Controls.RangeDivisionsMode.UnderlyingType" />
    <member name="T:NationalInstruments.Controls.ValueFormatterGroup">
      <summary>
            Provides a means for formatting a collection of values.
            </summary>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.SeparatorProperty">
      <summary>
            Identifies the Separator dependency property.
            </summary>
      <returns>
            The identifier for the Separator dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.DefaultFormatterProperty">
      <summary>
            Identifies the DefaultFormatter dependency property.
            </summary>
      <returns>
            The identifier for the DefaultFormatter dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.ValueFormattersProperty">
      <summary>
            Identifies the ValueFormatters dependency property.
            </summary>
      <returns>
            The identifier for the ValueFormatters dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.BackgroundProperty">
      <summary>
            Identifies the Background dependency property.
            </summary>
      <returns>
            The identifier for the Background dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.ForegroundProperty">
      <summary>
            Identifies the Foreground dependency property.
            </summary>
      <returns>
            The identifier for the Foreground dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.FontFamilyProperty">
      <summary>
            Identifies the FontFamily dependency property.
            </summary>
      <returns>
            The identifier for the FontFamily dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.FontSizeProperty">
      <summary>
            Identifies the FontSize dependency property.
            </summary>
      <returns>
            The identifier for the FontSize dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.FontStretchProperty">
      <summary>
            Identifies the FontStretch dependency property.
            </summary>
      <returns>
            The identifier for the FontStretch dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.FontStyleProperty">
      <summary>
            Identifies the FontStyle dependency property.
            </summary>
      <returns>
            The identifier for the FontStyle dependency property.
            </returns>
    </member>
    <member name="F:NationalInstruments.Controls.ValueFormatterGroup.FontWeightProperty">
      <summary>
            Identifies the FontWeight dependency property.
            </summary>
      <returns>
            The identifier for the FontWeight dependency property.
            </returns>
    </member>
    <member name="M:NationalInstruments.Controls.ValueFormatterGroup.CreateInstanceCore" />
    <member name="M:NationalInstruments.Controls.ValueFormatterGroup.#ctor">
      <summary>
            Initializes a new instance of the ValueFormatterGroup class.
            </summary>
    </member>
    <member name="M:NationalInstruments.Controls.ValueFormatterGroup.#ctor(System.String,NationalInstruments.Controls.Primitives.ValueFormatter)">
      <summary>
            Initializes a new instance of the ValueFormatterGroup class
             with the specified separator (parameter) and defaultFormatter (parameter).
            </summary>
      <param name="separator">The string used to separate each value.</param>
      <param name="defaultFormatter">The default formatter used when a formatter is not otherwise specified for a given index.</param>
    </member>
    <member name="M:NationalInstruments.Controls.ValueFormatterGroup.VisualizeCore``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs,System.Windows.UIElement)" />
    <member name="M:NationalInstruments.Controls.ValueFormatterGroup.Format``1(``0,NationalInstruments.Controls.Primitives.ValuePresenterArgs)">
      <summary>
            Formats the specified raw data value into a string representation.
            </summary>
      <typeparam name="TData">The type of the data.</typeparam>
      <param name="value">The value to be formatted.</param>
      <param name="args">Additional arguments.</param>
      <returns>The formatted value.</returns>
    </member>
    <member name="M:NationalInstruments.Controls.ValueFormatterGroup.ToString" />
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.Separator">
      <summary>Gets or sets the string used to separate each value.</summary>
      <exception cref="T:System.ArgumentException">value (parameter) cannot be null.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.DefaultFormatter">
      <summary>Gets or sets the default formatter used when a formatter is not specified for a given index.</summary>
      <exception cref="T:System.ArgumentException">value (parameter) cannot be null.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.ValueFormatters">
      <summary>Gets or sets the formatters to use for each index of data.</summary>
      <exception cref="T:System.ArgumentException">value (parameter) cannot be null.</exception>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.Background">
      <summary>Gets or sets the Brush used to draw the background of formatted values.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.Foreground">
      <summary>Gets or sets a brush that describes the foreground color.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.FontFamily">
      <summary>Gets or sets the font used to display text.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.FontSize">
      <summary>Gets or sets the size of the text.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.FontStretch">
      <summary>Gets or sets the degree to which a font is condensed or expanded on the screen.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.FontStyle">
      <summary>Gets or sets the style in which the text is rendered.</summary>
    </member>
    <member name="P:NationalInstruments.Controls.ValueFormatterGroup.FontWeight">
      <summary>Gets or sets the thickness of the specified font.</summary>
    </member>
  </members>
</doc>